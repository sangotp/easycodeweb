@page
@model EasyCodeAcademy.Web.Pages_Manage_Courses_Chapters.IndexModel

@{
    ViewData["Title"] = "Manage Chapters & Lessons";
    var status = ViewData["Status"];
}

@*<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CourseChapter[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CourseChapter[0].Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CourseChapter[0].created_date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CourseChapter[0].updated_date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CourseChapter[0].Course)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.CourseChapter is not null)
        {
            @foreach (var item in Model.CourseChapter)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.created_date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.updated_date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Course.CourseName)
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.ChapterId">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.ChapterId">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ChapterId">Delete</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>*@


<div class="content__container">
    <div class="nav-action">
        <div class="nav-action__return mt-32">
            <a asp-page="/Manage/Courses/Index" class="action-return__link link-basic link-restart">Back To Courses List</a>
        </div>
    </div>
    <div class="course-content mt-64">
        <div class="course-section-title text-heading">
            @if (Model.CourseOfChapter is not null)
            {
                <p class="course-section-title__text">@Model.CourseOfChapter.CourseName Content</p>
            }
            else
            {
                <p class="course-section-title__text">Course Content</p>
            }
        </div>
        <div class="course-content__container mt-16">
            <div class="course-content-summary">
                <div class="course-content-summary__all">
                    <span class="course-summary-item">
                        <button type="button" class="course-summary-item__btn create-chapter-btn btn-restart">
                            <i class="fa-solid fa-plus"></i>
                        </button>
                        24 chapters
                    </span>
                    <span class="course-summary-item">
                        @*                        <button type="button" class="course-summary-item__btn create-lesson-btn btn-restart">
                        <i class="fa-solid fa-plus"></i>
                        </button>*@
                        260 lessons
                    </span>
                    <span class="course-summary-item">Duration: NAN hours</span>
                </div>
                <div class="course-content-summary__action">
                    <button type="button" class="course-content-action-btn btn-restart">Expand All Chapters</button>
                    <div class="course-settings-action">
                        <form asp-page-handler="EditCourseContent" id="form-edit-setting" class="d-i-block" method="get" enctype="application/x-www-form-urlencoded">
                            @Html.AntiForgeryToken()
                            <button type="button" id="edit-setting" class="course-settings-action__btn btn-restart btn-basic mr-8">Edit</button>
                        </form>
                        <form asp-page-handler="DetailsCourseContent" id="form-details-setting" class="d-i-block" method="get" enctype="application/x-www-form-urlencoded">
                            @Html.AntiForgeryToken()
                            <button type="button" id="details-setting" class="course-settings-action__btn btn-restart btn-basic mr-8">Details</button>
                        </form>
                        <form asp-page-handler="DeleteCourseContent" id="form-remove-setting" class="d-i-block" method="get" enctype="application/x-www-form-urlencoded">
                            <button type="button" id="remove-setting" class="course-settings-action__btn btn-restart btn-basic">Remove</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="course-content-chapter">
                <ul class="course-chapter-list">
                    @if (Model.CourseChapterList is not null)
                    {
                        @foreach (var courseChapter in Model.CourseChapterList)
                        {
                            <li id="chapter-list-item-@courseChapter.ChapterId" class="course-chapter-list__item">
                                <div class="courses-chapter-item-container">
                                    <div class="course-chapter-action">
                                        <i class="fa-solid fa-angle-down"></i>
                                        <button type="button" id="expand-lesson-btn-@courseChapter.ChapterId" class="expand-lesson-btn btn-restart">
                                            @courseChapter.Title
                                        </button>
                                    </div>
                                    <div class="course-chapter-info">
                                        <span class="course-chapter-info__item">Ready</span>
                                        @if (@courseChapter.CourseLessons is not null)
                                        {
                                            if (@courseChapter.CourseLessons.Count > 1)
                                            {
                                                <span class="course-chapter-info__item" id="total-lesson-info-@courseChapter.ChapterId">@courseChapter.CourseLessons.Count Lessons</span>
                                            }
                                            else
                                            {
                                                <span class="course-chapter-info__item" id="total-lesson-info-@courseChapter.ChapterId">@courseChapter.CourseLessons.Count Lesson</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="course-chapter-info__item" id="total-lesson-info-@courseChapter.ChapterId">0 Lesson</span>
                                        }
                                        <span class="course-chapter-info__item">59 Minutes 05 Seconds</span>
                                    </div>
                                </div>
                                <div class="course-chapter-settings">
                                    <button type="button" id="chapter-settings-@courseChapter.ChapterId" class="course-chapter-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                </div>
                                <ul class="course-lesson-list" id="lesson-list-@courseChapter.ChapterId">
                                    @if (courseChapter.CourseLessons is not null)
                                    {
                                        if (courseChapter.CourseLessons.Count > 0)
                                        {
                                            @foreach (var courseLesson in courseChapter.CourseLessons)
                                            {
                                                <li class="course-lesson-list__item" id="lesson-list-item-@courseLesson.LessonId">
                                                    <div class="course-lesson-item-container">
                                                        <div class="course-lesson-action">
                                                            <i class="fa-regular fa-circle-play"></i>
                                                            <a href="" id="lesson-link-@courseLesson.LessonId" class="course-lesson-link">@courseLesson.Title</a>
                                                        </div>
                                                        <div class="course-lesson-info">
                                                            <span class="course-lesson-info__item">Ready</span>
                                                            <span class="course-lesson-info__item">21:27</span>
                                                        </div>
                                                    </div>
                                                    <div class="course-lesson-expand">
                                                        @if(courseLesson.CourseExerises != null && courseLesson.CourseExerises.Count >= 0 && courseLesson.CourseExerises.Count <= 1)
                                                        {
                                                            <button type="button" id="expand-exercise-btn-@courseLesson.LessonId" count-item="@courseLesson.CourseExerises.Count" class="lesson-expand-exercises_btn btn-restart"><i class="fa-solid fa-network-wired"></i>@courseLesson.CourseExerises.Count Exercise</button>
                                                        } else if(courseLesson.CourseExerises != null && courseLesson.CourseExerises.Count > 1) {
                                                            <button type="button" id="expand-exercise-btn-@courseLesson.LessonId" count-item="@courseLesson.CourseExerises.Count" class="lesson-expand-exercises_btn btn-restart"><i class="fa-solid fa-network-wired"></i>@courseLesson.CourseExerises.Count Exercises</button>
                                                        } else {
                                                            <button type="button" id="expand-exercise-btn-@courseLesson.LessonId" count-item="0" class="lesson-expand-exercises_btn btn-restart"><i class="fa-solid fa-network-wired"></i>0 Exercise</button>
                                                        }
                                                    </div>
                                                    <div class="course-lesson-settings">
                                                        <button type="button" id="lesson-settings-@courseLesson.LessonId" class="course-lesson-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                    </div>
                                                    @*Exercise*@
                                                    <ul class="course-exercise-list" id="exercise-list-@courseLesson.LessonId">
                                                        @if(courseLesson.CourseExerises is not null)
                                                        {
                                                            @foreach(var courseExercise in courseLesson.CourseExerises)
                                                            {
                                                               <li class="course-exercise-list__item" id="exercise-list-item-@courseExercise.ExerciseId">
                                                                    <div class="course-exercise-item-container">
                                                                        <div class="course-exercise-action">
                                                                        <i class="fa-solid fa-note-sticky"></i>
                                                                        <a href="" id="exercise-link-@courseExercise.ExerciseId" class="course-exercise-link">@courseExercise.Title</a>
                                                                        </div>
                                                                    </div>
                                                                    <div class="course-exercise-settings">
                                                                        <button type="button" id="exercise-settings-@courseExercise.ExerciseId" class="course-exercise-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                                    </div>
                                                                </li>
                                                            }
                                                        }

                                                        <li class="course-exercise-list__item">
                                                            <div class="course-exercise-item-container">
                                                                <div class="course-exercise-action">
                                                                    <button type="button" id="new-exercise-lesson-@courseLesson.LessonId" class="course-exercise-btn create-exercise-btn btn-restart"><i class="new-exercise-icon fa-solid fa-plus"></i>Exercise</button>
                                                                </div>
                                                            </div>
                                                        </li>
                                                    </ul>
                                                </li>
                                            }
                                        }
                                        else
                                        {
                                            <li class="course-lesson-list__item" id="not-found-lesson-item">
                                                <div class="course-lesson-item-container">
                                                    <div class="course-lesson-action">
                                                        No Lesson Found.
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }
                                    <li class="course-lesson-list__item">
                                        <div class="new-lesson-item-container">
                                            <div class="course-lesson-action">
                                                <i class="new-lesson-icon fa-solid fa-plus"></i>
                                                <button type="button" id="new-lesson-chapter-@courseChapter.ChapterId" class="course-new-lesson-btn create-lesson-btn btn-restart">
                                                    Lesson
                                                </button>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="course-chapter-list__item">
                            <div class="courses-chapter-item-container">
                                <div class="course-chapter-action" id="not-found-chapter">
                                    No Chapter Found.
                                </div>
                            </div>
                        </li>
                    }
                    @*                    <li class="course-chapter-list__item">
                    <div class="courses-chapter-item-container">
                    <div class="course-chapter-action">
                    <i class="fa-solid fa-angle-down"></i>
                    <button type="button" class="expand-lesson-btn btn-restart">
                    Chapter 2
                    </button>
                    </div>
                    <div class="course-chapter-info">
                    <span class="course-chapter-info__item">Ready</span>
                    <span class="course-chapter-info__item">3 Lessons</span>
                    <span class="course-chapter-info__item">1 Hours 06 Minutes</span>
                    </div>
                    </div>
                    <div class="course-chapter-settings">
                    <button type="button" class="course-chapter-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                    </div>
                    </li>
                    <li class="course-chapter-list__item">
                    <div class="courses-chapter-item-container">
                    <div class="course-chapter-action">
                    <i class="fa-solid fa-angle-down"></i>
                    <button type="button" class="expand-lesson-btn btn-restart">
                    Chapter 3
                    </button>
                    </div>
                    <div class="course-chapter-info">
                    <span class="course-chapter-info__item">Ready</span>
                    <span class="course-chapter-info__item">3 Lessons</span>
                    <span class="course-chapter-info__item">1 Hours 23 Minutes</span>
                    </div>
                    </div>
                    <div class="course-chapter-settings">
                    <button type="button" class="course-chapter-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                    </div>
                    </li>*@
                    <li class="course-chapter-list__item">
                        <div class="new-chapter-item-container">
                            <div class="course-chapter-action">
                                <i class="new-chapter-icon fa-solid fa-plus"></i>
                                <button type="button" class="course-new-chapter-btn create-chapter-btn btn-restart">
                                    Chapter
                                </button>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>

        @*CRUD Modal For Course Chapter - Lesson*@
        @*Create Modal*@
        <div class="modal-CRUD-container" id="create-chapter-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Create Chapter</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="create-chapter-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-form-field">
                            <form method="post" class="form-container" id="form-chapter" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="form-group mb-32">
                                    <span asp-validation-for="CourseChapter.Title" class="text-danger text-medium block mb-8"></span>
                                    <label for="chapter-title" class="form-label">Title</label>
                                    <input name="CourseChapter.Title" id="chapter-title" type="text" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    <span asp-validation-for="CourseChapter.Description" class="text-danger text-medium block mb-8"></span>
                                    <label for="chapter-desc" class="form-label-textarea">Chapter Description</label>
                                    <textarea name="CourseChapter.Description" id="chapter-desc" class="form-textarea summernoteEditor"></textarea>
                                </div>
                                <div class="form-group mb-32">
                                    <label class="full-width">Chapter Status</label>
                                    <span asp-validation-for="CourseChapter.Status" class="text-danger text-medium block mb-8"></span>
                                    <span class="checkbox-group mr-16">
                                        <input type="checkbox" id="chapter-content-not-available" class="form-checkbox form-checkbox-chapter" value="0" />
                                        <label for="chapter-content-not-available" class="form-label-checkbox">Not Available</label>
                                    </span>
                                    <span class="checkbox-group">
                                        <input type="checkbox" id="chapter-content-available" class="form-checkbox form-checkbox-chapter" value="1" />
                                        <label for="chapter-content-available" class="form-label-checkbox">Available</label>
                                    </span>
                                    <input asp-for="CourseChapter.Status" type="hidden" id="course-chapter-status" class="form-input full-width" />
                                </div>
                                @*                                <div class="form-group mb-32">
                                <label asp-for="CourseChapter.created_date" class="control-label"></label>
                                <input asp-for="CourseChapter.created_date" class="form-control" />
                                <span asp-validation-for="CourseChapter.created_date" class="text-danger"></span>
                                </div>
                                <div class="form-group mb-32">
                                <label asp-for="CourseChapter.updated_date" class="control-label"></label>
                                <input asp-for="CourseChapter.updated_date" class="form-control" />
                                <span asp-validation-for="CourseChapter.updated_date" class="text-danger"></span>
                                </div>*@
                                <div class="form-group mb-32">
                                    <input asp-for="CourseChapter.CourseId" type="hidden" id="chapter-courseId" class="form-input full-width" />
                                </div>
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="chapter-submit-btn" class="form-submit__btn btn-restart btn-basic">Submit</button>
                                    </div>
                                </div>
                            </form>
                            @*                            <form method="post">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="form-group mb-32">
                            <label asp-for="CourseChapter.Title" class="control-label"></label>
                            <input asp-for="CourseChapter.Title" class="form-control" />
                            <span asp-validation-for="CourseChapter.Title" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-32">
                            <label asp-for="CourseChapter.Description" class="control-label"></label>
                            <input asp-for="CourseChapter.Description" class="form-control" />
                            <span asp-validation-for="CourseChapter.Description" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-32">
                            <label asp-for="CourseChapter.created_date" class="control-label"></label>
                            <input asp-for="CourseChapter.created_date" class="form-control" />
                            <span asp-validation-for="CourseChapter.created_date" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-32">
                            <label asp-for="CourseChapter.updated_date" class="control-label"></label>
                            <input asp-for="CourseChapter.updated_date" class="form-control" />
                            <span asp-validation-for="CourseChapter.updated_date" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-32">
                            <label asp-for="CourseChapter.CourseId" class="control-label"></label>
                            <select asp-for="CourseChapter.CourseId" class="form-control" asp-items="ViewBag.CourseId"></select>
                            </div>
                            <div class="form-group">
                            <input type="submit" value="Create" class="btn btn-primary" />
                            </div>
                            </form>*@
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>

        <div class="modal-CRUD-container" id="create-lesson-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Create Lesson</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="create-lesson-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-form-field">
                            <form asp-page-handler="CreateCourseLesson" class="form-container" id="form-lesson" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @*<div asp-validation-summary="ModelOnly" class="text-danger"></div>*@
                                <div class="form-group mb-32">
                                    @*<span asp-validation-for="CourseLesson.Title" class="text-danger text-medium block mb-8"></span>*@
                                    <label for="lesson-title" class="form-label">Title</label>
                                    <input name="CourseLesson.Title" id="lesson-title" type="text" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    @*<span asp-validation-for="CourseLesson.Description" class="text-danger text-medium block mb-8"></span>*@
                                    <label for="lesson-desc" class="form-label-textarea">Lesson Description</label>
                                    <textarea name="CourseLesson.Description" id="lesson-desc" class="form-textarea summernoteEditor"></textarea>
                                </div>
                                @if (Model.CourseOfChapter is not null)
                                {
                                    if (Model.CourseOfChapter.CourseType == 1)
                                    {
                                        <div class="form-group mb-32">
                                            <label for="lesson-video" class="form-label-file">Lesson Video</label>
                                            <input name="FileUpload" id="lesson-video" type="file" class="form-file full-width" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-group mb-32">
                                            @*<span asp-validation-for="CourseLesson.Content" class="text-danger text-medium block mb-8"></span>*@
                                            <label for="lesson-content" class="form-label-textarea">Lesson Content</label>
                                            <textarea name="CourseLesson.Content" id="lesson-content" class="form-textarea summernoteEditor"></textarea>
                                        </div>
                                    }
                                }
                                <div class="form-group mb-32">
                                    <label class="full-width d-i-block mb-8">Lesson Achievement</label>
                                    <input type="hidden" name="CourseLesson.Achievement" id="hidden-lesson-achievement" class="lesson-achievement-input full-width" />
                                    <ul class="lesson-achievement-list">
                                        @*                                        <li class="lesson-achievement-list__item ml-16" id="lesson-achievement-item-1">
                                        <div class="lesson-achievement-input-container">
                                        <input type="text" name="lesson-achievement" class="lesson-achievement-input full-width" />
                                        <button type="button" id="lesson-achievement-remove-1" class="lesson-achievement-remove-btn btn-restart">
                                        <i class="fa-solid fa-minus"></i>
                                        </button>
                                        </div>
                                        </li>*@
                                        <li class="lesson-achievement-list__item remove-list-style-type">
                                            <span class="achievement-item-text" id="lesson-achievement-status">No Achievement Found.</span>
                                            <button type="button" id="add-lesson-achievement" class="lesson-achievement-item-btn btn-restart btn-config">Add Achievement</button>
                                        </li>
                                    </ul>
                                </div>
                                <div class="form-group mb-32">
                                    <label class="full-width d-i-block mb-8">Lesson Status</label>
                                    @*<span asp-validation-for="CourseLesson.Status" class="text-danger text-medium block mb-8"></span>*@
                                    <span class="checkbox-group mr-16">
                                        <input type="checkbox" id="lesson-content-not-available" class="form-checkbox form-checkbox-lesson" value="0" />
                                        <label for="lesson-content-not-available" class="form-label-checkbox">Not Available</label>
                                    </span>
                                    <span class="checkbox-group">
                                        <input type="checkbox" id="lesson-content-available" class="form-checkbox form-checkbox-lesson" value="1" />
                                        <label for="lesson-content-available" class="form-label-checkbox">Available</label>
                                    </span>
                                    <input name="CourseLesson.Status" type="hidden" id="course-lesson-status" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    <input name="CourseLesson.ChapterId" type="hidden" id="course-lesson-chapter-id" class="form-input full-width" />
                                </div>
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="lesson-submit-btn" class="form-submit__btn btn-restart btn-basic">Submit</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>

        <div class="modal-CRUD-container" id="create-exercise-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Create Exercise</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="create-exercise-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-form-field">
                            <form asp-page-handler="CreateLessonExercise" class="form-container" id="form-exercise" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @*<div asp-validation-summary="ModelOnly" class="text-danger"></div>*@
                                <div class="form-group mb-32">
                                    @*<span asp-validation-for="CourseLesson.Title" class="text-danger text-medium block mb-8"></span>*@
                                    <label for="exercise-title" class="form-label">Title</label>
                                    <input name="CourseExercise.Title" id="exercise-title" type="text" class="form-input full-width" />
                                </div>

                                <div class="form-group mb-32">
                                    <label for="exercise-desc" class="form-label-textarea">Exercise Description</label>
                                    <textarea name="CourseExercise.Description" id="exercise-desc" class="form-textarea summernoteEditor"></textarea>
                                </div>

                                <div class="form-group mb-32">
                                    <label for="exercise-content" class="form-label-textarea">Exercise Content</label>
                                    <textarea name="CourseExercise.Content" id="exercise-content" class="form-textarea summernoteEditor"></textarea>
                                </div>

                                <div class="form-group mb-32">
                                    <label class="full-width d-i-block mb-8">Exercise Status</label>
                                    @*<span asp-validation-for="CourseLesson.Status" class="text-danger text-medium block mb-8"></span>*@
                                    <span class="checkbox-group mr-16">
                                        <input type="checkbox" id="exercise-content-not-available" class="form-checkbox form-checkbox-exercise" value="0" />
                                        <label for="exercise-content-not-available" class="form-label-checkbox">Not Available</label>
                                    </span>
                                    <span class="checkbox-group">
                                        <input type="checkbox" id="exercise-content-available" class="form-checkbox form-checkbox-exercise" value="1" />
                                        <label for="exercise-content-available" class="form-label-checkbox">Available</label>
                                    </span>
                                    <input name="CourseExercise.Status" type="hidden" id="course-exercise-status" class="form-input full-width" />
                                </div>

                                <div class="form-group mb-32">
                                    <input name="CourseExercise.LessonId" type="hidden" id="course-exercise-lesson-id" class="form-input full-width" />
                                </div>

                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="exercise-submit-btn" class="form-submit__btn btn-restart btn-basic">Submit</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>





        @*Edit Modal*@
        <div class="modal-CRUD-container" id="edit-chapter-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Edit "<span id="edit-chapter-header" class="text-bold">Chapter</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="edit-chapter-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-form-field">
                            <form method="post" class="form-container" id="edit-form-chapter" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="edit-chapter-id" name="CourseChapter.ChapterId" />
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="form-group mb-32">
                                    <span asp-validation-for="CourseChapter.Title" class="text-danger text-medium block mb-8"></span>
                                    <label for="chapter-title" class="form-label">Title</label>
                                    <input name="CourseChapter.Title" id="edit-chapter-title" type="text" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    <span asp-validation-for="CourseChapter.Description" class="text-danger text-medium block mb-8"></span>
                                    <label for="chapter-desc" class="form-label-textarea">Chapter Description</label>
                                    <textarea name="CourseChapter.Description" id="edit-chapter-desc" class="form-textarea summernoteEditor"></textarea>
                                </div>
                                <div class="form-group mb-32">
                                    <label class="full-width">Chapter Status</label>
                                    <span asp-validation-for="CourseChapter.Status" class="text-danger text-medium block mb-8"></span>
                                    <span class="checkbox-group mr-16">
                                        <input type="checkbox" id="edit-chapter-content-not-available" class="form-checkbox edit-form-checkbox-chapter" value="0" />
                                        <label for="edit-chapter-content-not-available" class="form-label-checkbox">Not Available</label>
                                    </span>
                                    <span class="checkbox-group">
                                        <input type="checkbox" id="edit-chapter-content-available" class="form-checkbox edit-form-checkbox-chapter" value="1" />
                                        <label for="edit-chapter-content-available" class="form-label-checkbox">Available</label>
                                    </span>
                                    <input asp-for="CourseChapter.Status" type="hidden" id="edit-chapter-status" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    <input type="hidden" id="edit-chapter-created-date" asp-for="CourseChapter.created_date" class="form-control" />
                                </div>
                                <div class="form-group mb-32">
                                    <input asp-for="CourseChapter.CourseId" type="hidden" id="edit-chapter-courseId" class="form-input full-width" />
                                </div>
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="edit-chapter-submit-btn" class="form-submit__btn btn-restart btn-basic">Submit</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>



        <div class="modal-CRUD-container" id="edit-lesson-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Edit "<span id="edit-lesson-header" class="text-bold">Lesson</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="edit-lesson-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-form-field">
                            <form asp-page-handler="EditLessonContent" class="form-container" id="edit-form-lesson" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="edit-lesson-id" name="CourseLesson.LessonId" />
                                @*<div asp-validation-summary="ModelOnly" class="text-danger"></div>*@
                                <div class="form-group mb-32">
                                    @*<span asp-validation-for="CourseLesson.Title" class="text-danger text-medium block mb-8"></span>*@
                                    <label for="lesson-title" class="form-label">Title</label>
                                    <input name="CourseLesson.Title" id="edit-lesson-title" type="text" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    @*<span asp-validation-for="CourseLesson.Description" class="text-danger text-medium block mb-8"></span>*@
                                    <label for="lesson-desc" class="form-label-textarea">Lesson Description</label>
                                    <textarea name="CourseLesson.Description" id="edit-lesson-desc" class="form-textarea summernoteEditor"></textarea>
                                </div>
                                @if (Model.CourseOfChapter is not null)
                                {
                                    @if (Model.CourseOfChapter.CourseType == 1)
                                    {
                                        <div class="form-group mb32">
                                            <input type="hidden" name="CourseLesson.Video" id="hidden-lesson-video" />
                                        </div>
                                        <div class="form-group mb-32">
                                            <label for="lesson-video" class="form-label-file">Lesson Video</label>
                                            <video width="320" height="240" controls id="edit-lesson-video-source" class="form-video full-width">
                                                <source type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        </div>
                                        <div class="form-group mb-32">
                                            <label for="lesson-video" class="form-label-file">Lesson Upload Video</label>
                                            <input name="FileUpload" id="edit-lesson-video" type="file" class="form-file full-width" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-group mb-32">
                                            @*<span asp-validation-for="CourseLesson.Content" class="text-danger text-medium block mb-8"></span>*@
                                            <label for="lesson-content" class="form-label-textarea">Lesson Content</label>
                                            <textarea name="CourseLesson.Content" id="edit-lesson-content" class="form-textarea summernoteEditor"></textarea>
                                        </div>
                                    }
                                }
                                <div class="form-group mb-32">
                                    <label class="full-width d-i-block mb-8">Lesson Achievement</label>
                                    <input type="hidden" name="CourseLesson.Achievement" id="edit-hidden-lesson-achievement" class="lesson-achievement-input full-width" />
                                    <ul class="lesson-achievement-list" id="edit-lesson-achievement-list">
                                        @*                                        <li class="lesson-achievement-list__item ml-16" id="edit-lesson-achievement-item-1">
                                        <div class="lesson-achievement-input-container">
                                        <input type="text" name="lesson-achievement" class="lesson-achievement-input full-width" />
                                        <button type="button" id="lesson-achievement-remove-1" class="lesson-achievement-remove-btn btn-restart">
                                        <i class="fa-solid fa-minus"></i>
                                        </button>
                                        </div>
                                        </li>*@
                                        <li class="lesson-achievement-list__item remove-list-style-type">
                                            <span class="achievement-item-text" id="edit-lesson-achievement-status">No Achievement Found.</span>
                                            <button type="button" id="edit-create-lesson-achievement" class="lesson-achievement-item-btn btn-restart btn-config">Add Achievement</button>
                                        </li>
                                    </ul>
                                </div>
                                <div class="form-group mb-32">
                                    <label class="full-width d-i-block mb-8">Lesson Status</label>
                                    @*<span asp-validation-for="CourseLesson.Status" class="text-danger text-medium block mb-8"></span>*@
                                    <span class="checkbox-group mr-16">
                                        <input type="checkbox" id="edit-lesson-content-not-available" class="form-checkbox edit-form-checkbox-lesson" value="0" />
                                        <label for="edit-lesson-content-not-available" class="form-label-checkbox">Not Available</label>
                                    </span>
                                    <span class="checkbox-group">
                                        <input type="checkbox" id="edit-lesson-content-available" class="form-checkbox edit-form-checkbox-lesson" value="1" />
                                        <label for="edit-lesson-content-available" class="form-label-checkbox">Available</label>
                                    </span>
                                    <input name="CourseLesson.Status" type="hidden" id="edit-course-lesson-status" class="form-input full-width" />
                                </div>
                                <div class="form-group mb-32">
                                    <input type="hidden" id="edit-lesson-created-date" name="CourseLesson.created_date" class="form-control" />
                                </div>
                                <div class="form-group mb-32">
                                    <input name="CourseLesson.ChapterId" type="hidden" id="edit-course-lesson-chapter-id" class="form-input full-width" />
                                </div>
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="edit-lesson-submit-btn" class="form-submit__btn btn-restart btn-basic">Submit</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>

        <div class="modal-CRUD-container" id="edit-exercise-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Edit "<span id="edit-exercise-header" class="text-bold">Exercise</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="edit-exercise-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-form-field">
                            <form asp-page-handler="EditExerciseContent" class="form-container" id="edit-form-exercise" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="edit-exercise-id" name="CourseExercise.ExerciseId" />
                                @*<div asp-validation-summary="ModelOnly" class="text-danger"></div>*@
                                <div class="form-group mb-32">
                                    @*<span asp-validation-for="CourseLesson.Title" class="text-danger text-medium block mb-8"></span>*@
                                    <label for="exercise-title" class="form-label">Title</label>
                                    <input name="CourseExercise.Title" id="edit-exercise-title" type="text" class="form-input full-width" />
                                </div>

                                <div class="form-group mb-32">
                                    <label for="exercise-desc" class="form-label-textarea">Exercise Description</label>
                                    <textarea name="CourseExercise.Description" id="edit-exercise-desc" class="form-textarea summernoteEditor"></textarea>
                                </div>

                                <div class="form-group mb-32">
                                    <label for="exercise-content" class="form-label-textarea">Exercise Content</label>
                                    <textarea name="CourseExercise.Content" id="edit-exercise-content" class="form-textarea summernoteEditor"></textarea>
                                </div>

                                <div class="form-group mb-32">
                                    <label class="full-width d-i-block mb-8">Exercise Status</label>
                                    @*<span asp-validation-for="CourseLesson.Status" class="text-danger text-medium block mb-8"></span>*@
                                    <span class="checkbox-group mr-16">
                                        <input type="checkbox" id="edit-exercise-content-not-available" class="form-checkbox edit-form-checkbox-exercise" value="0" />
                                        <label for="edit-exercise-content-not-available" class="form-label-checkbox">Not Available</label>
                                    </span>
                                    <span class="checkbox-group">
                                        <input type="checkbox" id="edit-exercise-content-available" class="form-checkbox edit-form-checkbox-exercise" value="1" />
                                        <label for="edit-exercise-content-available" class="form-label-checkbox">Available</label>
                                    </span>
                                    <input name="CourseExercise.Status" type="hidden" id="edit-course-exercise-status" class="form-input full-width" />
                                </div>

                                <div class="form-group mb-32">
                                    <input type="hidden" id="edit-exercise-created-date" name="CourseExercise.created_date" class="form-control" />
                                </div>

                                <div class="form-group mb-32">
                                    <input name="CourseExercise.LessonId" type="hidden" id="edit-course-exercise-lesson-id" class="form-input full-width" />
                                </div>

                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="edit-exercise-submit-btn" class="form-submit__btn btn-restart btn-basic">Submit</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>



        @*Details Modal*@
        <div class="modal-CRUD-container" id="details-chapter-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Details "<span id="details-chapter-header" class="text-bold">Chapter</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="details-chapter-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-details-field">
                            <ul class="details-field-list">
                                <li class="details-field-list__item">
                                    <span id="details-chapter-id" class="details-item-content hide">Chapter Id</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">@Html.DisplayNameFor(model => model.CourseChapter.Title)</span>
                                    <span id="details-chapter-title" class="details-item-content">Chapter Title</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">@Html.DisplayNameFor(model => model.CourseChapter.Description)</span>
                                    <span id="details-chapter-desc" class="details-item-content full-width">Chapter Desc</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">@Html.DisplayNameFor(model => model.CourseChapter.Status)</span>
                                    <span id="details-chapter-status" class="details-item-content">Chapter Status</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">@Html.DisplayNameFor(model => model.CourseChapter.created_date)</span>
                                    <span id="details-chapter-created-date" class="details-item-content">Chapter Created Date</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">@Html.DisplayNameFor(model => model.CourseChapter.updated_date)</span>
                                    <span id="details-chapter-updated-date" class="details-item-content">Chapter Updated Date</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">@Html.DisplayNameFor(model => model.CourseChapter.CourseId)</span>
                                    @if (Model.CourseOfChapter is not null)
                                    {
                                        <span id="details-chapter-course-id" class="details-item-content">@Model.CourseOfChapter.CourseName</span>
                                    }
                                    else
                                    {
                                        <span id="details-chapter-course-id" class="details-item-content">Course Name</span>
                                    }
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title"></span>
                                    <div class="details-item-action">
                                        <form asp-page-handler="EditCourseContent" id="form-details-chapter" class="d-i-block" method="get" enctype="application/x-www-form-urlencoded">
                                            @Html.AntiForgeryToken()
                                        </form>
                                        <button type="button" id="details-submit-btn-chapter" class="details-item-action__btn btn-restart btn-basic">Edit</button>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="modal-CRUD__footer">Footer</div>*@
        </div>



        <div class="modal-CRUD-container" id="details-lesson-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Details "<span id="details-lesson-header" class="text-bold">Lesson</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="details-lesson-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-details-field">
                            <ul class="details-field-list">
                                <li class="details-field-list__item">
                                    <span id="details-lesson-id" class="details-item-content hide">Lesson Id</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Title</span>
                                    <span id="details-lesson-title" class="details-item-content">Lesson Title</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">Description</span>
                                    <span id="details-lesson-desc" class="details-item-content full-width">Lesson Desc</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">Content</span>
                                    <span id="details-lesson-content" class="details-item-content full-width">Lesson Content</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">Video</span>
                                    <video width="320" height="240" controls id="details-lesson-video-source" class="details-item-content full-width">
                                        <source type="video/mp4">
                                        Your browser does not support the video tag.
                                    </video>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">Achievement</span>
                                    <ul class="details-list-achievement full-width" id="details-lesson-achievement">
                                        <li class="details-list-achievement__item ml-16" id="details-achievement-item-no-found">
                                            No Achievement Found.
                                        </li>
                                    </ul>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Status</span>
                                    <span id="details-lesson-status" class="details-item-content">Lesson Status</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Created Date</span>
                                    <span id="details-lesson-created-date" class="details-item-content">Lesson Created Date</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Updated Date</span>
                                    <span id="details-lesson-updated-date" class="details-item-content">Lesson Updated Date</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Chapter</span>
                                    <span id="details-lesson-chapter-id" class="details-item-content">Chapter Title</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title"></span>
                                    <div class="details-item-action">
                                        <form asp-page-handler="EditLessonContent" id="form-details-lesson" class="d-i-block" method="get" enctype="application/x-www-form-urlencoded">
                                            @Html.AntiForgeryToken()
                                        </form>
                                        <button type="button" id="details-submit-btn-lesson" class="details-item-action__btn btn-restart btn-basic">Edit</button>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="modal-CRUD__footer">Footer</div>*@
        </div>

        <div class="modal-CRUD-container" id="details-exercise-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Details "<span id="details-exercise-header" class="text-bold">Exercise</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="details-exercise-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-details-field">
                            <ul class="details-field-list">
                                <li class="details-field-list__item">
                                    <span id="details-exercise-id" class="details-item-content hide">Exercise Id</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Title</span>
                                    <span id="details-exercise-title" class="details-item-content">Exercise Title</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">Description</span>
                                    <span id="details-exercise-desc" class="details-item-content full-width">Exercise Desc</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold">Content</span>
                                    <span id="details-exercise-content" class="details-item-content full-width">Exercise Content</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Status</span>
                                    <span id="details-exercise-status" class="details-item-content">Exercise Status</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Created Date</span>
                                    <span id="details-exercise-created-date" class="details-item-content">Exercise Created Date</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Updated Date</span>
                                    <span id="details-exercise-updated-date" class="details-item-content">Exercise Updated Date</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title text-bold mr-64">Lesson</span>
                                    <span id="details-exercise-lesson-id" class="details-item-content">Lesson Title</span>
                                </li>
                                <li class="details-field-list__item">
                                    <span class="details-item-title"></span>
                                    <div class="details-item-action">
                                        <form asp-page-handler="EditExerciseContent" id="form-details-exercise" class="d-i-block" method="get" enctype="application/x-www-form-urlencoded">
                                            @Html.AntiForgeryToken()
                                        </form>
                                        <button type="button" id="details-submit-btn-exercise" class="details-item-action__btn btn-restart btn-basic">Edit</button>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="modal-CRUD__footer">Footer</div>*@
        </div>



        @*Remove Modal*@
        <div class="modal-CRUD-container" id="remove-chapter-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Remove "<span id="delete-chapter-header" class="text-bold">Chapter</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="remove-chapter-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-Confirm-Content mb-32">
                            <div class="CRUD-Confirm-Delete">
                                Are you sure want to delete "<span class="CRUD-Confirm-Delete__text text-bold" id="delete-chapter-title">this chapter</span>"?
                            </div>
                        </div>
                        <div class="CRUD-form-field">
                            <form asp-page-handler="DeleteCourseContent" method="post" class="form-container" id="delete-form-chapter" enctype="application/x-www-form-urlencoded">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="CourseChapter.ChapterId" id="delete-chapter-id" />
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="delete-chapter-submit-btn" class="form-submit__btn btn-restart btn-basic">Confirm Delete</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>

        <div class="modal-CRUD-container" id="remove-lesson-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Remove "<span id="delete-lesson-header" class="text-bold">Lesson</span>" From "<span id="delete-lesson-from-header" class="text-bold">Chapter</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="remove-lesson-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-Confirm-Content mb-32">
                            <div class="CRUD-Confirm-Delete">
                                Are you sure want to delete "<span class="CRUD-Confirm-Delete__text text-bold" id="delete-lesson-title">this lesson</span>"?
                            </div>
                        </div>
                        <div class="CRUD-form-field">
                            <form asp-page-handler="DeleteCourseLesson" method="post" class="form-container" id="delete-form-lesson" enctype="application/x-www-form-urlencoded">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="CourseLesson.LessonId" id="delete-lesson-id" />
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="delete-lesson-submit-btn" class="form-submit__btn btn-restart btn-basic">Confirm Delete</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>

        <div class="modal-CRUD-container" id="remove-exercise-modal">
            <div class="modal-CRUD">
                <div class="modal-CRUD__header">
                    <div class="CRUD-header-content">
                        <div class="CRUD-header-title sub-heading">Remove "<span id="delete-exercise-header" class="text-bold">Exercise</span>" From "<span id="delete-exercise-from-lesson" class="text-bold">Lesson</span>"</div>
                        <div class="CRUD-header-action">
                            <button type="button" id="remove-exercise-close-modal" class="CRUD-header-action__btn btn-restart"><i class="fa-solid fa-xmark sub-heading"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-CRUD__body">
                    <div class="CRUD-body-content">
                        <div class="CRUD-Confirm-Content mb-32">
                            <div class="CRUD-Confirm-Delete">
                                Are you sure want to delete "<span class="CRUD-Confirm-Delete__text text-bold" id="delete-exercise-title">this exercise</span>"?
                            </div>
                        </div>
                        <div class="CRUD-form-field">
                            <form asp-page-handler="DeleteCourseExercise" method="post" class="form-container" id="delete-form-exercise" enctype="application/x-www-form-urlencoded">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="CourseExercise.ExerciseId" id="delete-exercise-id" />
                                <div class="form-group">
                                    <div class="form-submit">
                                        <button type="button" id="delete-exercise-submit-btn" class="form-submit__btn btn-restart btn-basic">Confirm Delete</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                @*<div class="modal-CRUD__footer">Footer</div>*@
            </div>
        </div>

    </div>
</div>


@section Scripts {
    <script type="text/javascript">
        // After Initial Javascript, HTML, CSS Done
        // SummerNote Editor
        $(document).ready(function () {
            $(".summernoteEditor").each(function () {
                $(this).summernote({
                    placeholder: 'Content...',
                    tabsize: 2,
                    height: 200,
                    minHeight: 100,
                    maxHeight: 300,
                    focus: true,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['strikethrough', 'superscript', 'subscript']],
                        ['fontsize', ['fontsize']],
                        ['color', ['color']],
                        ['para', ['style', 'ul', 'ol', 'paragraph', 'height']],
                        ['table', ['table']],
                        ['insert', ['link', 'picture', 'video']],
                        ['view', ['fullscreen', 'codeview', 'help']]
                    ],
                    popover: {
                        image: [
                            ['image', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']],
                            ['float', ['floatLeft', 'floatRight', 'floatNone']],
                            ['remove', ['removeMedia']]
                        ],
                        link: [
                            ['link', ['linkDialogShow', 'unlink']]
                        ],
                        table: [
                            ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],
                            ['delete', ['deleteRow', 'deleteCol', 'deleteTable']],
                        ],
                        air: [
                            ['color', ['color']],
                            ['font', ['bold', 'underline', 'clear']],
                            ['para', ['ul', 'paragraph']],
                            ['table', ['table']],
                            ['insert', ['link', 'picture']]
                        ]
                    },
                    codemirror: {
                        theme: 'monokai'
                    }
                });
            });
        });









        // Focus Input Field
        const inputs = document.querySelectorAll(".form-input");
        inputs.forEach(item => {
            item.addEventListener("focus", function () {
                MoveLabelToTop(item);
            });

            item.addEventListener("focusout", function () {
                if (item.value == null || item.value == '') {
                    MoveLabelToDefault(item);
                }
            });
        });










        // Show Modal When Click Create Chapter Button
        const createChapterBtns = document.querySelectorAll(".create-chapter-btn");
        createChapterBtns.forEach(item => {
            item.addEventListener("click", function () {
                ShowCreateChapterModal();
            });
        });

        // Close Modal When Click Close Create Modal Chapter Button
        const closeCreateChapterBtn = document.getElementById("create-chapter-close-modal");
        closeCreateChapterBtn.addEventListener("click", function () {
            HideCreateChapterModal();
            ClearFormModal(closeCreateChapterBtn.id);
        });

        // Show Modal When Click Edit Setting Button
        const editSettingBtn = document.getElementById("edit-setting");
        editSettingBtn.addEventListener("click", function () {
            GetEditData(editSettingBtn.parentElement.id);
            ResetSettingState(editSettingBtn.parentElement.id);
            if (editSettingBtn.parentElement.id.match("chapter")) {
                ShowEditChapterModal();
            } else if (editSettingBtn.parentElement.id.match("lesson")) {
                ShowEditLessonModal();
            } else if (editSettingBtn.parentElement.id.match("exercise")) {
                ShowEditExerciseModal();
            }

        });

        // Close Modal When Click Close Edit Modal Chapter Button
        const closeEditChapterBtn = document.getElementById("edit-chapter-close-modal");
        closeEditChapterBtn.addEventListener("click", function () {
            if (closeEditChapterBtn.parentElement)
                HideEditChapterModal();
            ClearFormModal(closeEditChapterBtn.id);
        });

        // Show Modal When Click Details Setting Button
        const detailsSettingBtn = document.getElementById("details-setting");
        detailsSettingBtn.addEventListener("click", function () {
            GetDetailsData(detailsSettingBtn.parentElement.id);
            ResetSettingState(detailsSettingBtn.parentElement.id);
            if (detailsSettingBtn.parentElement.id.match("chapter")) {
                ShowDetailsChapterModal();
            } else if (detailsSettingBtn.parentElement.id.match("lesson")) {
                ShowDetailsLessonModal();
            } else if (detailsSettingBtn.parentElement.id.match("exercise")) {
                ShowDetailsExerciseModal();
            }
        });

        // Close Modal When Click Close Details Modal Chapter Button
        const closeDetailsChapterBtn = document.getElementById("details-chapter-close-modal");
        closeDetailsChapterBtn.addEventListener("click", function () {
            HideDetailsChapterModal();
            ClearFormModal(closeDetailsChapterBtn.id);
        });

        // Show Modal When Click Remove Chapter Button
        const removeSettingBtn = document.getElementById("remove-setting");
        removeSettingBtn.addEventListener("click", function () {
            GetDeleteData(removeSettingBtn.parentElement.id);
            ResetSettingState(removeSettingBtn.parentElement.id);

            if (removeSettingBtn.parentElement.id.match("chapter")) {
                ShowRemoveChapterModal();
            } else if (removeSettingBtn.parentElement.id.match("lesson")) {
                ShowRemoveLessonModal();
            } else if (removeSettingBtn.parentElement.id.match("exercise")) {
                ShowRemoveExerciseModal();
            }
        });

        // Close Modal When Click Close Remove Modal Chapter Button
        const closeRemoveChapterBtn = document.getElementById("remove-chapter-close-modal");
        closeRemoveChapterBtn.addEventListener("click", function () {
            HideRemoveChapterModal();
            ClearFormModal(closeRemoveChapterBtn.id);
        });

        // Close Modal When Click Out Side Modal
        window.addEventListener("click", function (event) {
            if (event.target.matches("#create-chapter-modal")) {
                HideCreateChapterModal();
                ClearFormModal(document.getElementById("create-chapter-modal").id);
            }
            if (event.target.matches("#edit-chapter-modal")) {
                HideEditChapterModal();
                ClearFormModal(document.getElementById("edit-chapter-modal").id);
            }
            if (event.target.matches("#details-chapter-modal")) {
                HideDetailsChapterModal();
                ClearFormModal(document.getElementById("details-chapter-modal").id);
            }
            if (event.target.matches("#remove-chapter-modal")) {
                HideRemoveChapterModal();
                ClearFormModal(document.getElementById("remove-chapter-modal").id);
            }
            if (event.target.matches("#create-lesson-modal")) {
                HideCreateLessonModal();

                // Remove ChapterId For Lesson
                const inputLessonChapterId = document.getElementById("course-lesson-chapter-id");
                inputLessonChapterId.value = null;

                ClearFormModal(document.getElementById("create-lesson-modal").id);
            }
            if (event.target.matches("#edit-lesson-modal")) {
                HideEditLessonModal();
                ClearFormModal(document.getElementById("edit-lesson-modal").id);
            }
            if (event.target.matches("#details-lesson-modal")) {
                HideDetailsLessonModal();
                ClearFormModal(document.getElementById("details-lesson-modal").id);
            }
            if (event.target.matches("#remove-lesson-modal")) {
                HideRemoveLessonModal();
                ClearFormModal(document.getElementById("remove-lesson-modal").id);
            }
            if (event.target.matches("#create-exercise-modal")) {
                HideCreateExerciseModal();

                // Remove LessonId For Exercise
                const inputExerciseLessonId = document.getElementById("course-exercise-lesson-id");
                inputExerciseLessonId.value = null;

                ClearFormModal(document.getElementById("create-exercise-modal").id);
            }
            if(event.target.matches("#edit-exercise-modal")) {
                HideEditExerciseModal();
                ClearFormModal(document.getElementById("edit-exercise-modal").id);
            }
            if(event.target.matches("#details-exercise-modal")) {
                HideDetailsExerciseModal();
                ClearFormModal(document.getElementById("details-exercise-modal").id);
            }
            if(event.target.matches("#remove-exercise-modal")) {
                HideRemoveExerciseModal();
                ClearFormModal(document.getElementById("remove-exercise-modal").id);
            }
        });

        // Show Modal When Click Create Lesson Button
        const createLessonBtns = document.querySelectorAll(".create-lesson-btn");
        createLessonBtns.forEach(item => {
            item.addEventListener("click", function () {
                // Assign ChapterId For Lesson
                const inputLessonChapterId = document.getElementById("course-lesson-chapter-id");
                inputLessonChapterId.value = item.id.slice(item.id.lastIndexOf('-') + 1);
                ShowCreateLessonModal();
            });
        });

        // Close Modal When Click Close Create Modal Lesson Button
        const closeCreateLessonBtn = document.getElementById("create-lesson-close-modal");
        closeCreateLessonBtn.addEventListener("click", function () {
            //// Remove ChapterId For Lesson
            //const inputLessonChapterId = document.getElementById("course-lesson-chapter-id");
            //inputLessonChapterId.value = null;
            HideCreateLessonModal();
            ClearFormModal(closeCreateLessonBtn.id);
        });

        // Close Modal When Click Close Edit Modal Lesson Button
        const closeEditLessonBtn = document.getElementById("edit-lesson-close-modal");
        closeEditLessonBtn.addEventListener("click", function () {
            HideEditLessonModal();
            ClearFormModal(closeEditLessonBtn.id);
        });

        // Close Modal When Click Close Details Modal Lesson Button
        const closeDetailsLessonBtn = document.getElementById("details-lesson-close-modal");
        closeDetailsLessonBtn.addEventListener("click", function () {
            HideDetailsLessonModal();
            ClearFormModal(closeDetailsLessonBtn.id);
        });

        // Close Modal When Click Close Remove Modal Lesson Button
        const closeRemoveLessonBtn = document.getElementById("remove-lesson-close-modal");
        closeRemoveLessonBtn.addEventListener("click", function () {
            HideRemoveLessonModal();
            ClearFormModal(closeRemoveLessonBtn.id);
        });

        // Show Modal When Click Create Exercise Button
        const createExerciseBtns = document.querySelectorAll(".create-exercise-btn");
        createExerciseBtns.forEach(item => {
            item.addEventListener("click", function () {
                // Assign LessonId For Exercise
                const inputExerciseLessonId = document.getElementById("course-exercise-lesson-id");
                inputExerciseLessonId.value = item.id.slice(item.id.lastIndexOf('-') + 1);
                ShowCreateExerciseModal();
            });
        });

        // Close Modal When Click Close Create Modal Exercise Button
        const closeCreateExerciseBtn = document.getElementById("create-exercise-close-modal");
        closeCreateExerciseBtn.addEventListener("click", function() {
            HideCreateExerciseModal();
            ClearFormModal(closeCreateExerciseBtn.id);
        });

        // Close Modal When Click Close Edit Modal Exercise Button
        const closeEditExerciseBtn = document.getElementById("edit-exercise-close-modal");
        closeEditExerciseBtn.addEventListener("click", function () {
            HideEditExerciseModal();
            ClearFormModal(closeEditExerciseBtn.id);
        });

        // Close Modal When Click Close Details Modal Exercise Button
        const closeDetailsExerciseBtn = document.getElementById("details-exercise-close-modal");
        closeDetailsExerciseBtn.addEventListener("click", function () {
            HideDetailsExerciseModal();
            ClearFormModal(closeDetailsExerciseBtn.id);
        });

        // Close Modal When Click Close Remove Modal Exercise Button
        const closeRemoveExerciseBtn = document.getElementById("remove-exercise-close-modal");
        closeRemoveExerciseBtn.addEventListener("click", function () {
            HideRemoveExerciseModal();
            ClearFormModal(closeRemoveExerciseBtn.id);
        });


        // Prevent Select Multiple Checkbox For Create Chapter And Assign Value For Chapter Status Input Field
        const checkboxsChapter = document.querySelectorAll(".form-checkbox-chapter");
        checkboxsChapter.forEach(item => {
            item.addEventListener("click", function () {
                for (let i = 0; i < checkboxsChapter.length; i++) {
                    checkboxsChapter[i].checked = false;
                }

                item.checked = true;
                const chapterStatusInput = document.getElementById("course-chapter-status");
                if (item.id == "chapter-content-available" && chapterStatusInput) {

                    chapterStatusInput.value = 1;
                }
                else {
                    chapterStatusInput.value = 0;
                }

            });
        });

        // Prevent Select Multiple Checkbox For Create Lesson And Assign Value For Lesson Status Input Field
        const checkboxsLesson = document.querySelectorAll(".form-checkbox-lesson");
        checkboxsLesson.forEach(item => {
            item.addEventListener("click", function () {
                for (let i = 0; i < checkboxsLesson.length; i++) {
                    checkboxsLesson[i].checked = false;
                }

                item.checked = true;

                const lessonStatusInput = document.getElementById("course-lesson-status");
                if (item.id == "lesson-content-available" && lessonStatusInput) {

                    lessonStatusInput.value = 1;
                }
                else {
                    lessonStatusInput.value = 0;
                }
            });
        });

        // Prevent Select Multiple Checkbox For Create Exercise
        const checkboxsExercise = document.querySelectorAll(".form-checkbox-exercise");
        checkboxsExercise.forEach(item => {
            item.addEventListener("click", function () {
                for (let i = 0; i < checkboxsExercise.length; i++) {
                    checkboxsExercise[i].checked = false;
                }

                item.checked = true;

                const exerciseStatusInput = document.getElementById("course-exercise-status");
                if (item.id == "exercise-content-available" && exerciseStatusInput) {

                    exerciseStatusInput.value = 1;
                }
                else {
                    exerciseStatusInput.value = 0;
                }
            });
        });

        // Assign CourseId For Chapter
        const chapterCourseId = document.getElementById("chapter-courseId");
        const paramsURL = new URLSearchParams(window.location.search);
        if (paramsURL.has('id')) {
            chapterCourseId.value = paramsURL.get('id');
        }

        // Post: Form Create Chapter
        const submitCreateChapterBtn = document.getElementById("chapter-submit-btn");
        const chapterForm = document.getElementById("form-chapter");
        submitCreateChapterBtn.addEventListener("click", function () {
            PostCreateChapterFormAjax(chapterForm);
            HideCreateChapterModal();
        });

        // Post: Form Edit Chapter
        const submitEditChapterBtn = document.getElementById("edit-chapter-submit-btn");
        const editChapterForm = document.getElementById("edit-form-chapter");
        submitEditChapterBtn.addEventListener("click", function () {
            PostEditChapterFormAjax(editChapterForm);
            HideEditChapterModal();
            ClearFormModal(closeEditChapterBtn.id);
        });

        // Get: Chapter Data From Details For Edit Modal
        const submitDetailsChapterBtn = document.getElementById("details-submit-btn-chapter");
        submitDetailsChapterBtn.addEventListener("click", function () {
            if (Number.parseInt(document.getElementById("details-chapter-id").innerHTML)) {
                currChapterId = Number.parseInt(document.getElementById("details-chapter-id").innerHTML);
                //console.log("Current Chapter Id Before Get Data: " + currChapterId);
            }
            GetEditData(submitDetailsChapterBtn.id);
            currChapterId = 0;
            //console.log("Current Chapter Id After Get Data: " + currChapterId);
            HideDetailsChapterModal();
            ClearFormModal(closeDetailsChapterBtn.id);
            ShowEditChapterModal();
        });

        // Post: Form Delete Chapter
        const submitDeleteChapterBtn = document.getElementById("delete-chapter-submit-btn");
        const removeChapterForm = document.getElementById("delete-form-chapter");
        submitDeleteChapterBtn.addEventListener("click", function () {
            PostRemoveChapterFormAjax(removeChapterForm);
            HideRemoveChapterModal();
            ClearFormModal(closeRemoveChapterBtn.id);
        });

        // Post: Form Create Lesson
        const submitCreateLessonBtn = document.getElementById("lesson-submit-btn");
        const lessonForm = document.getElementById("form-lesson");
        let totalLesson = 0;
        submitCreateLessonBtn.addEventListener("click", function () {
            AssignLessonAchievement(submitCreateLessonBtn);
            PostCreateLessonFormAjax(lessonForm);
            HideCreateLessonModal();
        });

        // Post: Form Edit Lesson
        const submitEditLessonBtn = document.getElementById("edit-lesson-submit-btn");
        const editLessonForm = document.getElementById("edit-form-lesson");
        submitEditLessonBtn.addEventListener("click", function () {
            AssignLessonAchievement(submitEditLessonBtn);
            PostEditLessonFormAjax(editLessonForm);
            HideEditLessonModal();
            ClearFormModal(closeEditLessonBtn.id);
        });

        // Get: Lesson Data From Details For Edit Modal Lesson
        const submitDetailsLessonBtn = document.getElementById("details-submit-btn-lesson");
        submitDetailsLessonBtn.addEventListener("click", function () {
            if (Number.parseInt(document.getElementById("details-lesson-id").innerHTML)) {
                currLessonId = Number.parseInt(document.getElementById("details-lesson-id").innerHTML);
                console.log("Current Lesson Id Before Get Data: " + currLessonId);
            }
            GetEditData(submitDetailsLessonBtn.id);
            currLessonId = 0;
            console.log("Current Lesson Id After Get Data: " + currLessonId);
            HideDetailsLessonModal();
            ClearFormModal(closeDetailsLessonBtn.id);
            ShowEditLessonModal();
        });

        // Post: Form Delete Lesson
        const submitDeleteLessonBtn = document.getElementById("delete-lesson-submit-btn");
        const removeLessonForm = document.getElementById("delete-form-lesson");
        submitDeleteLessonBtn.addEventListener("click", function () {
            PostRemoveLessonFormAjax(removeLessonForm);
            HideRemoveLessonModal();
            ClearFormModal(closeRemoveLessonBtn.id);
        });

        // Post: Form Create Exercise
        const submitCreateExerciseBtn = document.getElementById("exercise-submit-btn");
        const exerciseForm = document.getElementById("form-exercise");
        let totalExercise = 0;
        let ExerciseRemain = 0;
        submitCreateExerciseBtn.addEventListener("click", function () {
            PostCreateExerciseFormAjax(exerciseForm);
            HideCreateExerciseModal();
        });

        // Post: Form Edit Exercise
        const submitEditExerciseBtn = document.getElementById("edit-exercise-submit-btn");
        const editExerciseForm = document.getElementById("edit-form-exercise");
        submitEditExerciseBtn.addEventListener("click", function () {
            PostEditExerciseFormAjax(editExerciseForm);
            HideEditExerciseModal();
            ClearFormModal(closeEditExerciseBtn.id);
        });

        // Get: Exercise Data From Details For Edit Modal Exercise
        const submitDetailsExerciseBtn = document.getElementById("details-submit-btn-exercise");
        submitDetailsExerciseBtn.addEventListener("click", function () {
            if (Number.parseInt(document.getElementById("details-exercise-id").innerHTML)) {
                currExerciseId = Number.parseInt(document.getElementById("details-exercise-id").innerHTML);
                console.log("Current Exercise Id Before Get Data: " + currExerciseId);
            }
            GetEditData(submitDetailsExerciseBtn.id);
            currExerciseId = 0;
            console.log("Current Exercise Id After Get Data: " + currExerciseId);
            HideDetailsExerciseModal();
            ClearFormModal(closeDetailsExerciseBtn.id);
            ShowEditExerciseModal();
        });

        // Post: Form Delete Exercise
        const submitDeleteExerciseBtn = document.getElementById("delete-exercise-submit-btn");
        const removeExerciseForm = document.getElementById("delete-form-exercise");
        submitDeleteExerciseBtn.addEventListener("click", function () {
            PostRemoveExerciseFormAjax(removeExerciseForm);
            HideRemoveExerciseModal();
            ClearFormModal(closeRemoveExerciseBtn.id);
        });



        // Toggle Expand Lesson List
        const expandLessonBtns = document.querySelectorAll(".expand-lesson-btn");
        expandLessonBtns.forEach(item => {
            item.addEventListener("click", function () {
                ToggleExpandLesson(item);
            });
        });


        // List,item height and count Item for Tree View Exercises
        let listHeight = 0;
        //let itemsHeight = 0;
        let countItems = 0;


        // Toggle Expand Exercise List
        const expandExerciseBtns = document.querySelectorAll(".lesson-expand-exercises_btn");
        expandExerciseBtns.forEach(item => {
            item.addEventListener("click", function () {
                ToggleExpandExercise(item);

                // Display Tree View
                const exerciseLists = document.querySelectorAll(".course-exercise-list");
                if (exerciseLists) {
                    exerciseLists.forEach(item => {
                        // Tree View For List and Item
                        if (item) {
                            CreateItemTreeView(item);
                        }
                    });
                }
            });
        });

        // Show Setting For Specific Chapter When Click Setting Chapter Button
        const ChapterSettingBtns = document.querySelectorAll(".course-chapter-settings__btn");
        let isShowSettings = false;
        let isSwitchSettings = false;
        let currChapterId = 0;
        let isChapterSetting = false;
        ChapterSettingBtns.forEach(item => {
            item.addEventListener("click", function () {
                isChapterSetting = true;

                ControlIsShowSettings(item);
                //console.log("ChapterId: " + currChapterId);
                //console.log(typeof currChapterId);
                ToggleChangeButtonIcon(item);
                ToggleShowSettings(item);

                // Change Setting Group Id
                ChangeSettingGroupId(item);

                // Handle Switch Settings Button
                if (currLessonId != 0) {
                    currLessonId = 0;
                }

                if (currExerciseId != 0)
                {
                    currExerciseId = 0;
                }

                if (isSwitchSettings == true) {
                    isSwitchSettings = false;
                }

                //Assign current Chapter Id
                currChapterId = Number.parseInt(item.id.slice(item.id.lastIndexOf('-') + 1));

                isChapterSetting = false;
            });
        });

        // Show Setting For Specific Lesson When Click Setting Lesson Button
        const lessonSettingBtns = document.querySelectorAll(".course-lesson-settings__btn");
        let currLessonId = 0;
        let isLessonSetting = false;
        lessonSettingBtns.forEach(item => {
            item.addEventListener("click", function () {
                isLessonSetting = true;

                ControlIsShowSettings(item);
                //console.log("ChapterId: " + currChapterId);
                //console.log(typeof currChapterId);
                ToggleChangeButtonIcon(item);
                ToggleShowSettings(item);


                // Change Setting Group Id
                ChangeSettingGroupId(item);

                // Handle Switch Settings Button
                if (currChapterId != 0) {
                    currChapterId = 0;
                }

                if (currExerciseId != 0)
                {
                    currExerciseId = 0;
                }

                if (isSwitchSettings == true) {
                    isSwitchSettings = false;
                }

                // Assign current Lesson Id
                currLessonId = Number.parseInt(item.id.slice(item.id.lastIndexOf('-') + 1));

                isLessonSetting = false;
            });
        });

        // Append New Achievement Item In Create Modal When Click New Lesson Button
        const newLessonAchievementBtn = document.getElementById("add-lesson-achievement");
        let RemoveId = 0;
        newLessonAchievementBtn.addEventListener("click", function () {
            AppendAchievementItem(newLessonAchievementBtn);
        });

        // Append New Achievement Item In Edit Modal When Click New Lesson Button
        const editAddNewLessonAchievementBtn = document.getElementById("edit-create-lesson-achievement");
        let editModalRemoveId = 0;
        editAddNewLessonAchievementBtn.addEventListener("click", function () {
            AppendAchievementItem(editAddNewLessonAchievementBtn);
        });

        // Show Setting For Specific Exercise When Click Setting Exercise Button
        const exerciseSettingBtns = document.querySelectorAll(".course-exercise-settings__btn");
        let currExerciseId = 0;
        let isExerciseSetting = false;
        exerciseSettingBtns.forEach(item => {
            item.addEventListener("click", function () {
                isExerciseSetting = true;

                ControlIsShowSettings(item);
                //console.log("ChapterId: " + currChapterId);
                //console.log(typeof currChapterId);
                ToggleChangeButtonIcon(item);
                ToggleShowSettings(item);


                // Change Setting Group Id (Xem Lai)
                ChangeSettingGroupId(item);

                // Handle Switch Settings Button
                if (currChapterId != 0) {
                    currChapterId = 0;
                }

                if (currLessonId != 0) {
                    currLessonId = 0;
                }

                if (isSwitchSettings == true) {
                    isSwitchSettings = false;
                }

                // Assign current Exercise Id
                currExerciseId = Number.parseInt(item.id.slice(item.id.lastIndexOf('-') + 1));

                isExerciseSetting = false;
            });
        });








        // Function: Create Tree View For Item
        function CreateItemTreeView(ulList) {
            if (ulList.tagName.toLowerCase() == "ul") {
                CalculateHeight(ulList);
                if (listHeight != 0) {
                    ulList.style.setProperty('--Listheight', `${listHeight}px`);
                    for (let i = 0; i < ulList.children.length; i++) {
                        ulList.children[i].style.setProperty('--Itemheight', `${ulList.children[i].clientHeight / 2}px`);
                    }

                    // Reset List Height
                    listHeight = 0;
                }
            }
        }

        // Function: Calculate height for list and items
        function CalculateHeight(list) {
            for (let i = 0; i < list.children.length; i++) {
                ++countItems;
                if (countItems == list.children.length) {
                    listHeight += (list.children[i].clientHeight / 2) + 1;
                } else {
                    listHeight += list.children[i].clientHeight;
                }
            }

            // Reset Count Items
            countItems = 0;
        }


        // Function: Move Label To Top Of Input Field
        function MoveLabelToTop(input) {
            input.style.transition = "all 0.3s";
            input.style.padding = "16px 8px";
            input.style.fontSize = "16px";
            input.previousElementSibling.style.transition = "all 0.3s";
            input.previousElementSibling.style.top = "0px";
            input.previousElementSibling.style.color = "var(--black)";
            input.previousElementSibling.style.backgroundColor = "var(--white)";
            input.previousElementSibling.style.padding = "0px 8px";
            input.previousElementSibling.style.fontSize = "18px";
        }

        // Function: Move Label To Default Position Of Input Field
        function MoveLabelToDefault(input) {
            //input.style.transition = "all 0.3s";
            input.style.padding = "8px";
            //input.previousElementSibling.style.transition = "all 0.3s";
            input.previousElementSibling.style.top = "50%";
            input.previousElementSibling.style.color = "#707070";
            input.previousElementSibling.style.backgroundColor = "transparent";
            input.previousElementSibling.style.padding = "0px";
            input.previousElementSibling.style.fontSize = "16px";
        }

        // Function: Show Create Chapter Modal
        function ShowCreateChapterModal() {
            const createChapterModal = document.getElementById("create-chapter-modal");
            if (createChapterModal) {
                if (!createChapterModal.classList.contains("show-flex")) {
                    createChapterModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Create Chapter Modal
        function HideCreateChapterModal() {
            const createChapterModal = document.getElementById("create-chapter-modal");
            if (createChapterModal) {
                if (createChapterModal.classList.contains("show-flex")) {
                    createChapterModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Edit Chapter Modal
        function ShowEditChapterModal() {
            const editChapterModal = document.getElementById("edit-chapter-modal");
            if (editChapterModal) {
                if (!editChapterModal.classList.contains("show-flex")) {
                    editChapterModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Edit Chapter Modal
        function HideEditChapterModal() {
            const editChapterModal = document.getElementById("edit-chapter-modal");
            if (editChapterModal) {
                if (editChapterModal.classList.contains("show-flex")) {
                    editChapterModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Details Chapter Modal
        function ShowDetailsChapterModal() {
            const detailsChapterModal = document.getElementById("details-chapter-modal");
            if (detailsChapterModal) {
                if (!detailsChapterModal.classList.contains("show-flex")) {
                    detailsChapterModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Details Chapter Modal
        function HideDetailsChapterModal() {
            const detailsChapterModal = document.getElementById("details-chapter-modal");
            if (detailsChapterModal) {
                if (detailsChapterModal.classList.contains("show-flex")) {
                    detailsChapterModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Remove Chapter Modal
        function ShowRemoveChapterModal() {
            const removeChapterModal = document.getElementById("remove-chapter-modal");
            if (removeChapterModal) {
                if (!removeChapterModal.classList.contains("show-flex")) {
                    removeChapterModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Remove Chapter Modal
        function HideRemoveChapterModal() {
            const removeChapterModal = document.getElementById("remove-chapter-modal");
            if (removeChapterModal) {
                if (removeChapterModal.classList.contains("show-flex")) {
                    removeChapterModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Create Lesson Modal
        function ShowCreateLessonModal() {
            const createLessonModal = document.getElementById("create-lesson-modal");
            if (createLessonModal) {
                if (!createLessonModal.classList.contains("show-flex")) {
                    createLessonModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Create Lesson Modal
        function HideCreateLessonModal() {
            const createLessonModal = document.getElementById("create-lesson-modal");
            if (createLessonModal) {
                if (createLessonModal.classList.contains("show-flex")) {
                    createLessonModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Edit Lesson Modal
        function ShowEditLessonModal() {
            const editLessonModal = document.getElementById("edit-lesson-modal");
            if (editLessonModal) {
                if (!editLessonModal.classList.contains("show-flex")) {
                    editLessonModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Edit Chapter Modal
        function HideEditLessonModal() {
            const editLessonModal = document.getElementById("edit-lesson-modal");
            if (editLessonModal) {
                if (editLessonModal.classList.contains("show-flex")) {
                    editLessonModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Details Lesson Modal
        function ShowDetailsLessonModal() {
            const detailsLessonModal = document.getElementById("details-lesson-modal");
            if (detailsLessonModal) {
                if (!detailsLessonModal.classList.contains("show-flex")) {
                    detailsLessonModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Details Lesson Modal
        function HideDetailsLessonModal() {
            const detailsLessonModal = document.getElementById("details-lesson-modal");
            if (detailsLessonModal) {
                if (detailsLessonModal.classList.contains("show-flex")) {
                    detailsLessonModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Remove Lesson Modal
        function ShowRemoveLessonModal() {
            const removeLessonModal = document.getElementById("remove-lesson-modal");
            if (removeLessonModal) {
                if (!removeLessonModal.classList.contains("show-flex")) {
                    removeLessonModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Remove Lesson Modal
        function HideRemoveLessonModal() {
            const removeLessonModal = document.getElementById("remove-lesson-modal");
            if (removeLessonModal) {
                if (removeLessonModal.classList.contains("show-flex")) {
                    removeLessonModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Create Exercise Modal
        function ShowCreateExerciseModal() {
            const createExerciseModal = document.getElementById("create-exercise-modal");
            if (createExerciseModal) {
                if (!createExerciseModal.classList.contains("show-flex")) {
                    createExerciseModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Create Exercise Modal
        function HideCreateExerciseModal() {
            const createExerciseModal = document.getElementById("create-exercise-modal");
            if (createExerciseModal) {
                if (createExerciseModal.classList.contains("show-flex")) {
                    createExerciseModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Edit Exercise Modal
        function ShowEditExerciseModal() {
            const editExerciseModal = document.getElementById("edit-exercise-modal");
            if (editExerciseModal) {
                if (!editExerciseModal.classList.contains("show-flex")) {
                    editExerciseModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Edit Exercise Modal
        function HideEditExerciseModal() {
            const editExerciseModal = document.getElementById("edit-exercise-modal");
            if (editExerciseModal) {
                if (editExerciseModal.classList.contains("show-flex")) {
                    editExerciseModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

                // Function: Show Details Lesson Modal
        function ShowDetailsExerciseModal() {
            const detailsExerciseModal = document.getElementById("details-exercise-modal");
            if (detailsExerciseModal) {
                if (!detailsExerciseModal.classList.contains("show-flex")) {
                    detailsExerciseModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Details Exercise Modal
        function HideDetailsExerciseModal() {
            const detailsExerciseModal = document.getElementById("details-exercise-modal");
            if (detailsExerciseModal) {
                if (detailsExerciseModal.classList.contains("show-flex")) {
                    detailsExerciseModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Show Remove Exercise Modal
        function ShowRemoveExerciseModal() {
            const removeExerciseModal = document.getElementById("remove-exercise-modal");
            if (removeExerciseModal) {
                if (!removeExerciseModal.classList.contains("show-flex")) {
                    removeExerciseModal.classList.add("show-flex");

                    // To get the scroll position of current webpage
                    let TopScroll = window.pageYOffset || document.documentElement.scrollTop;
                    let LeftScroll = window.pageXOffset || document.documentElement.scrollLeft;

                    window.onscroll = function () {
                        window.scrollTo(LeftScroll, TopScroll);
                    };
                }
            }
        }

        // Function: Hide Remove Exercise Modal
        function HideRemoveExerciseModal() {
            const removeExerciseModal = document.getElementById("remove-exercise-modal");
            if (removeExerciseModal) {
                if (removeExerciseModal.classList.contains("show-flex")) {
                    removeExerciseModal.classList.remove("show-flex");

                    // Release Lock Scroll
                    window.onscroll = function () { };
                }
            }
        }

        // Function: Post Create Chapter Form Ajax
        function PostCreateChapterFormAjax(form) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);
                    if (response != undefined && response != null) {
                        console.log(response);

                        // Remove modal form input field
                        document.getElementById("chapter-title").value = null;

                        // Reset Input Field
                        const inputs = document.querySelectorAll(".form-input");
                        inputs.forEach(item => {
                            if (item.id == "chapter-title") {
                                MoveLabelToDefault(item);
                            }
                        });

                        if (document.getElementById("chapter-desc")) {
                            document.getElementById("chapter-desc").value = null;
                            for (let i = 0; i < document.getElementById("chapter-desc").nextElementSibling.children.length; i++) {
                                if (document.getElementById("chapter-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                    for (let j = 0; j < document.getElementById("chapter-desc").nextElementSibling.children[i].children.length; j++) {
                                        if (document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("chapter-desc").value == "") {
                                            document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                        }
                                        if (document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                            document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                        }
                                    }
                                }
                            }

                        }
                        document.getElementById("course-chapter-status").value = null;
                        if (document.getElementById("chapter-content-available").checked == true) {
                            document.getElementById("chapter-content-available").checked = false;
                        }

                        if (document.getElementById("chapter-content-not-available").checked == true) {
                            document.getElementById("chapter-content-not-available").checked = false;
                        }

                        // Append New List Item For Chapter
                        let html = `
                                                                                                                                                                                                                                                                                                                                <li class="course-chapter-list__item">
                                                                                                                                                                                                                                                                                                                                        <div class="courses-chapter-item-container">
                                                                                                                                                                                                                                                                                                                                            <div class="course-chapter-action">
                                                                                                                                                                                                                                                                                                                                                <i class="fa-solid fa-angle-down"></i>
                                                                                                                                                                                                                                                                                                                                                <button type="button" id="expand-lesson-btn-courseChapter.ChapterId" class="expand-lesson-btn btn-restart">
                                                                                                                                                                                                                                                                                                                                                    courseChapter.Title
                                                                                                                                                                                                                                                                                                                                                </button>
                                                                                                                                                                                                                                                                                                                                            </div>
                                                                                                                                                                                                                                                                                                                                            <div class="course-chapter-info">
                                                                                                                                                                                                                                                                                                                                                <span class="course-chapter-info__item">Ready</span>
                                                                                                                                                                                                                                                                                                                                                <span class="course-chapter-info__item">3 Lessons</span>
                                                                                                                                                                                                                                                                                                                                                <span class="course-chapter-info__item">59 Minutes 05 Seconds</span>
                                                                                                                                                                                                                                                                                                                                            </div>
                                                                                                                                                                                                                                                                                                                                        </div>
                                                                                                                                                                                                                                                                                                                                        <div class="course-chapter-settings">
                                                                                                                                                                                                                                                                                                                                            <button type="button" class="course-chapter-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                                                                                                                                                                                                                                                                                                        </div>
                                                                                                                                                                                                                                                                                                                                    <ul class="course-lesson-list" id="lesson-list-courseChapter.ChapterId">
                                                                                                                                                                                                                                                                                                                                        <li class="course-lesson-list__item">
                                                                                                                                                                                                                                                                                                                                            <div class="new-lesson-item-container">
                                                                                                                                                                                                                                                                                                                                                <div class="course-lesson-action">
                                                                                                                                                                                                                                                                                                                                                    <i class="new-lesson-icon fa-solid fa-plus"></i>
                                                                                                                                                                                                                                                                                                                                                    <button type="button" class="course-new-lesson-btn create-lesson-btn btn-restart">
                                                                                                                                                                                                                                                                                                                                                        Lesson
                                                                                                                                                                                                                                                                                                                                                    </button>
                                                                                                                                                                                                                                                                                                                                                </div>
                                                                                                                                                                                                                                                                                                                                            </div>
                                                                                                                                                                                                                                                                                                                                        </li>
                                                                                                                                                                                                                                                                                                                                    </ul>
                                                                                                                                                                                                                                                                                                                                </li>
                                                                                                                                                                                                                                                                                                                               <li class="course-chapter-list__item">
                                                                                                                                                                                                                                                                                                                                    <div class="new-chapter-item-container">
                                                                                                                                                                                                                                                                                                                                        <div class="course-chapter-action">
                                                                                                                                                                                                                                                                                                                                            <i class="new-chapter-icon fa-solid fa-plus"></i>
                                                                                                                                                                                                                                                                                                                                            <button type="button" class="course-new-chapter-btn create-chapter-btn btn-restart">
                                                                                                                                                                                                                                                                                                                                                Chapter
                                                                                                                                                                                                                                                                                                                                            </button>
                                                                                                                                                                                                                                                                                                                                        </div>
                                                                                                                                                                                                                                                                                                                                    </div>
                                                                                                                                                                                                                                                                                                                                </li>`

                        // Create "div" node
                        const div = document.createElement("div");

                        // Add Class For "div" node
                        div.classList.add("courses-chapter-item-container");
                        div.setAttribute("custom-chapter-index", "");

                        // Create "divFirstChild" node
                        const divFirstChild = document.createElement("div");

                        // Add Class For "divFirstChild" node
                        divFirstChild.classList.add("course-chapter-action");
                        divFirstChild.setAttribute("custom-chapter-index", "");

                        // Create "iconFirstChild" node
                        const iconFirstChild = document.createElement("i");

                        // Add Class For "iconFirstChild" node
                        iconFirstChild.classList.add("fa-solid", "fa-angle-down");
                        iconFirstChild.setAttribute("custom-chapter-index", "");

                        // Create "buttonFirstChild" node
                        const buttonFirstChild = document.createElement("button");
                        buttonFirstChild.type = "button";
                        buttonFirstChild.id = "expand-lesson-btn-" + response.chapterId;
                        buttonFirstChild.innerHTML = response.title;

                        // Add Class For "buttonFirstChild" node
                        buttonFirstChild.classList.add("expand-lesson-btn", "btn-restart");
                        buttonFirstChild.setAttribute("custom-chapter-index", "");

                        // Create "divLastChild" node
                        const divLastChild = document.createElement("div");

                        // Add Class For "divLastChild" node
                        divLastChild.classList.add("course-chapter-info");
                        divLastChild.setAttribute("custom-chapter-index", "");

                        // Create "divNextElementSibling" node
                        const divNextElementSibling = document.createElement("div");

                        // Add Class For "divNextElementSibling" node
                        divNextElementSibling.classList.add("course-chapter-settings");
                        divNextElementSibling.setAttribute("custom-chapter-index", "");

                        // Create "buttonNextElementSiblingChild" node
                        const buttonNextElementSiblingChild = document.createElement("button");
                        buttonNextElementSiblingChild.type = "button";

                        // Add Class For "buttonNextElementSiblingChild" node
                        buttonNextElementSiblingChild.classList.add("course-chapter-settings__btn", "btn-restart");
                        buttonNextElementSiblingChild.setAttribute("custom-chapter-index", "");
                        buttonNextElementSiblingChild.id = "chapter-settings-" + response.chapterId;

                        // Create "iconNextElementSiblingChildBtn" node
                        const iconNextElementSiblingChildBtn = document.createElement("i");

                        // Add Class For "iconNextElementSiblingChildBtn" node
                        iconNextElementSiblingChildBtn.classList.add("fa-solid", "fa-gear");
                        iconNextElementSiblingChildBtn.setAttribute("custom-chapter-index", "");


                        /***  Lesson List  ***/

                        // Create "lessonList" node
                        const lessonList = document.createElement("ul");
                        lessonList.id = "lesson-list-" + response.chapterId;

                        // Add Class For "lessonList" node
                        lessonList.classList.add("course-lesson-list");
                        lessonList.setAttribute("custom-chapter-index", "");


                        // Append Lesson Section

                        for (let i = 1; i <= 2; i++) {
                            // Create "nodelesson" node
                            const nodelesson = document.createElement("li");

                            // Add Class For "nodelesson" node
                            nodelesson.classList.add("course-lesson-list__item");
                            nodelesson.setAttribute("custom-chapter-index", "");


                            if (i == 1) {
                                // Add Id For "nodelesson" node
                                nodelesson.id = "not-found-lesson-item";

                                // Create "divlesson" node
                                const divlesson = document.createElement("div");

                                // Add Class For "divlesson" node
                                divlesson.classList.add("course-lesson-item-container");
                                divlesson.setAttribute("custom-chapter-index", "");

                                // Create "divLessonChild" node
                                const divLessonChild = document.createElement("div");

                                // Add Class For "divLessonChild" node
                                divLessonChild.classList.add("course-lesson-action");
                                divLessonChild.setAttribute("custom-chapter-index", "");
                                divLessonChild.innerHTML = "No Lesson Found.";

                                divlesson.appendChild(divLessonChild);
                                nodelesson.appendChild(divlesson);
                                lessonList.appendChild(nodelesson);
                            } else {
                                // Create "divlesson" node
                                const divlesson = document.createElement("div");

                                // Add Class For "divlesson" node
                                divlesson.classList.add("new-lesson-item-container");
                                divlesson.setAttribute("custom-chapter-index", "");

                                // Create "divLessonChild" node
                                const divLessonChild = document.createElement("div");

                                // Add Class For "divLessonChild" node
                                divLessonChild.classList.add("course-lesson-action");
                                divLessonChild.setAttribute("custom-chapter-index", "");

                                // Create "iconLessonChild" node
                                const iconLessonChild = document.createElement("i");

                                // Add Class For "iconLessonChild" node
                                iconLessonChild.classList.add("new-lesson-icon", "fa-solid", "fa-plus");
                                iconLessonChild.setAttribute("custom-chapter-index", "");

                                // Create "buttonLessonChild" node
                                const buttonLessonChild = document.createElement("button");
                                buttonLessonChild.type = "button";
                                buttonLessonChild.innerHTML = "Lesson";

                                // Add Class For "buttonLessonChild" node
                                buttonLessonChild.classList.add("course-new-lesson-btn", "create-lesson-btn", "btn-restart");
                                buttonLessonChild.id = "new-lesson-chapter-" + response.chapterId;
                                buttonLessonChild.setAttribute("custom-chapter-index", "");

                                divLessonChild.appendChild(iconLessonChild);
                                divLessonChild.appendChild(buttonLessonChild);
                                divlesson.appendChild(divLessonChild);
                                nodelesson.appendChild(divlesson);
                                lessonList.appendChild(nodelesson);
                            }
                        }


                        // Append Chapter Section
                        buttonNextElementSiblingChild.appendChild(iconNextElementSiblingChildBtn);

                        divNextElementSibling.appendChild(buttonNextElementSiblingChild);

                        for (let i = 1; i <= 3; i++) {
                            // Create "spanLastChild" node
                            const spanLastChild = document.createElement("span");

                            // Add Class For "spanLastChild" node
                            spanLastChild.classList.add("course-chapter-info__item");
                            spanLastChild.setAttribute("custom-chapter-index", "");

                            if (i == 1) {
                                spanLastChild.innerHTML = "Ready";

                                divLastChild.appendChild(spanLastChild);
                            } else if (i == 2) {
                                spanLastChild.innerHTML = "0 Lesson";
                                spanLastChild.id = "total-lesson-info-" + response.chapterId;
                                divLastChild.appendChild(spanLastChild);
                            } else {
                                spanLastChild.innerHTML = "0 Minutes";

                                divLastChild.appendChild(spanLastChild);
                            }
                        }

                        divFirstChild.appendChild(iconFirstChild);
                        divFirstChild.appendChild(buttonFirstChild);

                        div.appendChild(divFirstChild);
                        div.appendChild(divLastChild);

                        // Create "li" node
                        const node = document.createElement("li");

                        // Add Class For "li" node
                        node.classList.add("course-chapter-list__item");
                        node.id = "chapter-list-item-" + response.chapterId;
                        node.setAttribute("custom-chapter-index", "");

                        // Li Content
                        node.appendChild(div);
                        node.appendChild(divNextElementSibling);
                        node.appendChild(lessonList);

                        const ChapterList = document.querySelector(".course-chapter-list");

                        const courseChapterActions = document.querySelectorAll(".course-chapter-action");
                        if (courseChapterActions) {
                            courseChapterActions.forEach(item => {
                                if (item.id == "not-found-chapter") {
                                    ChapterList.removeChild(ChapterList.children[ChapterList.children.length - 2]);
                                }
                            });
                        }
                        ChapterList.insertBefore(node, ChapterList.children[ChapterList.children.length - 1]);

                        // Toggle Expand Lesson List
                        const expandLessonBtnsClone = document.querySelectorAll(".expand-lesson-btn");
                        expandLessonBtnsClone[expandLessonBtnsClone.length - 1].addEventListener("click", function () {
                            ToggleExpandLesson(expandLessonBtnsClone[expandLessonBtnsClone.length - 1]);
                        });

                        // Show Setting For Specific Chapter When Click Setting Chapter Button
                        const ChapterSettingBtnsClone = document.querySelectorAll(".course-chapter-settings__btn");
                        ChapterSettingBtnsClone[ChapterSettingBtnsClone.length - 1].addEventListener("click", function () {
                            ControlIsShowSettings(ChapterSettingBtnsClone[ChapterSettingBtnsClone.length - 1]);
                            //console.log("ChapterId: " + currChapterId);
                            //console.log(typeof currChapterId);
                            ToggleChangeButtonIcon(ChapterSettingBtnsClone[ChapterSettingBtnsClone.length - 1]);
                            ToggleShowSettings(ChapterSettingBtnsClone[ChapterSettingBtnsClone.length - 1]);

                            // Change Setting Group Id
                            ChangeSettingGroupId(ChapterSettingBtnsClone[ChapterSettingBtnsClone.length - 1]);

                            // Handle Switch Settings Button
                            if (currLessonId != 0) {
                                currLessonId = 0;
                            }

                            if (isSwitchSettings == true) {
                                isSwitchSettings = false;
                            }

                            //Assign current Chapter Id
                            currChapterId = Number.parseInt(ChapterSettingBtnsClone[ChapterSettingBtnsClone.length - 1].id.slice(settingBtnsClone[settingBtnsClone.length - 1].id.lastIndexOf('-') + 1));
                        });

                        // Show Modal When Click Create Lesson Button
                        const createLessonBtnsClone = document.querySelectorAll(".create-lesson-btn");
                        createLessonBtnsClone[createLessonBtnsClone.length - 1].addEventListener("click", function () {
                            // Assign ChapterId For Lesson
                            const inputLessonChapterId = document.getElementById("course-lesson-chapter-id");
                            inputLessonChapterId.value = createLessonBtnsClone[createLessonBtnsClone.length - 1].id.slice(createLessonBtnsClone[createLessonBtnsClone.length - 1].id.lastIndexOf('-') + 1);
                            ShowCreateLessonModal();
                        });
                    }
                    else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Create New Chapter \"Invalid Request Information.\"");
                }
            }


            let url = form.action;
            let data = new FormData(form);
            //data.append('CourseChapter.Title', "Chapter 1");
            //data.append('CourseChapter.Description', "Chapter DESC");
            //data.append('CourseChapter.Status', "1");
            // Send a request
            xhttp.open("POST", url);
            //xhttp.setRequestHeader("Content-type", "multipart/form-data");
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            //xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            //xhttp.setRequestHeader("Content-type", "application/json");
            xhttp.send(data);
        }

        // Function: Post Edit Chapter Form Ajax
        function PostEditChapterFormAjax(editForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);
                    if (response != undefined && response != null) {
                        console.log(response);

                        const chapterItemTitle = document.getElementById("expand-lesson-btn-" + response.chapterId);
                        chapterItemTitle.innerHTML = response.title;
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Edit Chapter \"Invalid Request Information.\"");
                }
            }

            //let url = editForm.action;
            let url = `/Manage/Courses/Chapters/Edit?handler=EditCourseContent`;
            let data = new FormData(editForm);
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send(data);
        }

        // Function: Post Remove Chapter Form Ajax
        function PostRemoveChapterFormAjax(removeForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);

                    if (response != undefined && response != null) {
                        console.log(response);

                        // Remove Chapter Item From List
                        const ChapterList = document.querySelector(".course-chapter-list");

                        // If list not empty (include add chapter button in list item, that's why > 1 not 0)
                        if (ChapterList.children.length > 1) {
                            for (let i = 0; i < ChapterList.children.length; i++) {
                                if (Number.parseInt(ChapterList.children[i].id.slice(ChapterList.children[i].id.lastIndexOf('-') + 1)) == response.chapterId) {
                                    ChapterList.removeChild(ChapterList.children[i]);
                                }
                            }
                        }

                        // If list empty (include add chapter button in list item, that's why <= 1 not 0)
                        if (ChapterList.children.length > 0 && ChapterList.children.length <= 1) {
                            const html = `  <li class="course-chapter-list__item">
                                                                                                                                                                                                                                                <div class="courses-chapter-item-container">
                                                                                                                                                                                                                                                    <div class="course-chapter-action" id="not-found-chapter">
                                                                                                                                                                                                                                                        No Chapter Found.
                                                                                                                                                                                                                                                    </div>
                                                                                                                                                                                                                                                </div>
                                                                                                                                                                                                                                            </li>`;
                            // Create "li" node
                            const li = document.createElement("li");

                            // Add Class For "li" node
                            li.classList.add("course-chapter-list__item");
                            li.setAttribute("custom-chapter-index", "");

                            // Create "div" node
                            const div = document.createElement("div");

                            // Add Class For "div" node
                            div.classList.add("courses-chapter-item-container");
                            div.setAttribute("custom-chapter-index", "");

                            // Create "divChild" node
                            const divChild = document.createElement("div");

                            // Add Class For "divChild" node
                            divChild.classList.add("course-chapter-action");

                            // Add Id For "divChild" node
                            divChild.id = "not-found-chapter";

                            // Set Text For "divChild" node
                            divChild.innerHTML = "No Chapter Found.";

                            div.appendChild(divChild);
                            li.appendChild(div);
                            ChapterList.insertBefore(li, ChapterList.children[ChapterList.children.length - 1]);
                        }
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Remove Chapter \"Invalid Request Information.\"");
                }
            }

            let url = ``;
            let data = new FormData(removeForm);
            if (data.has("CourseChapter.ChapterId")) {
                url = `/Manage/Courses/Chapters/Delete?id=${data.get("CourseChapter.ChapterId")}&handler=DeleteCourseContent`;
            }
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send();
        }

        // Function: Post Create Lesson Form Ajax
        function PostCreateLessonFormAjax(lessonForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);
                    if (response != undefined && response != null) {
                        console.log(response);

                        // Remove Input Value, checkbox, etc...
                        document.getElementById("lesson-title").value = null;

                        // Reset Input Field
                        const inputs = document.querySelectorAll(".form-input");
                        inputs.forEach(item => {
                            if (item.id == "lesson-title") {
                                MoveLabelToDefault(item);
                            }
                        });

                        if (document.getElementById("lesson-desc")) {
                            document.getElementById("lesson-desc").value = null;
                            for (let i = 0; i < document.getElementById("lesson-desc").nextElementSibling.children.length; i++) {
                                if (document.getElementById("lesson-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                    for (let j = 0; j < document.getElementById("lesson-desc").nextElementSibling.children[i].children.length; j++) {
                                        if (document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("chapter-desc").value == "") {
                                            document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                        }
                                        if (document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                            document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                        }
                                    }
                                }
                            }

                        }

                        if (document.getElementById("lesson-video") != null) {
                            document.getElementById("lesson-video").value = null;
                        }

                        if (document.getElementById("lesson-content") != null) {
                            document.getElementById("lesson-content").value = null;
                            document.getElementById("lesson-content").innerHTML = null;
                        }

                        document.getElementById("hidden-lesson-achievement").value = null;

                        for (let i = document.querySelector(".lesson-achievement-list").children.length - 1; i >= 0; i--) {
                            if (document.querySelector(".lesson-achievement-list").children[i].id != null) {
                                if (document.querySelector(".lesson-achievement-list").children[i].id.indexOf(`lesson-achievement-item-${i + 1}`) != -1) {
                                    //document.querySelector(".lesson-achievement-list").removeChild(document.querySelector(".lesson-achievement-list").children[i]);
                                    //console.log(document.querySelector(".lesson-achievement-list").children[i].id.slice(document.querySelector(".lesson-achievement-list").children[i].id.lastIndexOf('-') + 1));
                                    RemoveAchievementItem(document.querySelector(".lesson-achievement-list").children[i].id.slice(document.querySelector(".lesson-achievement-list").children[i].id.lastIndexOf('-') + 1));
                                }
                            }
                        }

                        if (document.getElementById("lesson-content-not-available").checked == true) {
                            document.getElementById("lesson-content-not-available").checked = false;
                        }

                        if (document.getElementById("lesson-content-available").checked == true) {
                            document.getElementById("lesson-content-available").checked = false;
                        }

                        document.getElementById("course-lesson-status").value = null;
                        document.getElementById("course-lesson-chapter-id").value = null;

                        // Append New Lesson Item
                        const html = `          <li class="course-lesson-list__item" id="lesson-list-item-courseLesson.LessonId">
                                                                                                                                                            <div class="course-lesson-item-container">
                                                                                                                                                                <div class="course-lesson-action">
                                                                                                                                                                    <i class="fa-regular fa-circle-play"></i>
                                                                                                                                                                    <a href="" class="course-lesson-link">(courseLesson.Title)</a>
                                                                                                                                                                </div>
                                                                                                                                                                <div class="course-lesson-info">
                                                                                                                                                                    <span class="course-lesson-info__item">Ready</span>
                                                                                                                                                                    <span class="course-lesson-info__item">21:27</span>
                                                                                                                                                                </div>
                                                                                                                                                            </div>
                                                                                                                                                            <div class="course-lesson-expand">
                                                                                                                                                                <button type="button" id="expand-exercise-btn-(courseLesson.LessonId)" class="lesson-expand-exercises_btn btn-restart"><i class="fa-solid fa-network-wired"></i>3 Exercises</button>
                                                                                                                                                            </div>
                                                                                                                                                            <div class="course-lesson-settings">
                                                                                                                                                                <button type="button" class="course-lesson-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                                                                                                                            </div>
        @*Exercise*@
                                                                                                                                                            <ul class="course-exercise-list" id="exercise-list-(courseLesson.LessonId)">
                                                                                                                                                                <li class="course-exercise-list__item">
                                                                                                                                                                    <div class="course-exercise-item-container">
                                                                                                                                                                        <div class="course-exercise-action">
                                                                                                                                                                            <i class="fa-solid fa-note-sticky"></i>
                                                                                                                                                                            <a href="" class="course-exercise-link">Exercise 1</a>
                                                                                                                                                                        </div>
                                                                                                                                                                    </div>
                                                                                                                                                                    <div class="course-exercise-settings">
                                                                                                                                                                        <button type="button" class="course-exercise-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                                                                                                                                    </div>
                                                                                                                                                                </li>
                                                                                                                                                                <li class="course-exercise-list__item">
                                                                                                                                                                    <div class="course-exercise-item-container">
                                                                                                                                                                        <div class="course-exercise-action">
                                                                                                                                                                            <i class="fa-solid fa-note-sticky"></i>
                                                                                                                                                                            <a href="" class="course-exercise-link">Exercise 2</a>
                                                                                                                                                                        </div>
                                                                                                                                                                    </div>
                                                                                                                                                                    <div class="course-exercise-settings">
                                                                                                                                                                        <button type="button" class="course-exercise-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                                                                                                                                    </div>
                                                                                                                                                                </li>
                                                                                                                                                                <li class="course-exercise-list__item">
                                                                                                                                                                    <div class="course-exercise-item-container">
                                                                                                                                                                        <div class="course-exercise-action">
                                                                                                                                                                            <i class="fa-solid fa-note-sticky"></i>
                                                                                                                                                                            <a href="" class="course-exercise-link">Exercise 3</a>
                                                                                                                                                                        </div>
                                                                                                                                                                    </div>
                                                                                                                                                                    <div class="course-exercise-settings">
                                                                                                                                                                        <button type="button" class="course-exercise-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                                                                                                                                                                    </div>
                                                                                                                                                                </li>
                                                                                                                                                                <li class="course-exercise-list__item">
                                                                                                                                                                    <div class="course-exercise-item-container">
                                                                                                                                                                        <div class="course-exercise-action">
                                                                                                                                                                            <button type="button" class="course-exercise-btn create-exercise-btn btn-restart"><i class="new-chapter-icon fa-solid fa-plus"></i>Exercise</button>
                                                                                                                                                                        </div>
                                                                                                                                                                    </div>
                                                                                                                                                                </li>
                                                                                                                                                            </ul>
                                                                                                                                                        </li>`;

                        // Lesson List
                        const ul = document.getElementById("lesson-list-" + response.chapterId);

                        // Create "li" node
                        const li = document.createElement("li");

                        // Add Class For "li" node
                        li.classList.add("course-lesson-list__item");
                        li.id = `lesson-list-item-${response.lessonId}`
                        li.setAttribute("custom-chapter-index", "");

                        for (let i = 1; i <= 3; i++) {
                            // Create "div" node
                            const div = document.createElement("div");
                            div.setAttribute("custom-chapter-index", "");

                            if (i == 1) {
                                // Add Class For "div" node
                                div.classList.add("course-lesson-item-container");

                                for (let j = 1; j <= 2; j++) {
                                    // Create "divChild" node
                                    const divChild = document.createElement("div");
                                    divChild.setAttribute("custom-chapter-index", "");
                                    if (j == 1) {
                                        divChild.classList.add("course-lesson-action");

                                        // Create "iconChild" node
                                        const iconChild = document.createElement("i");

                                        // Add Class For "iconChild" node
                                        iconChild.classList.add("fa-regular", "fa-circle-play");
                                        iconChild.setAttribute("custom-chapter-index", "");

                                        // Create "linkChild" node
                                        const linkChild = document.createElement("a");

                                        // Add Class For "linkChild" node
                                        linkChild.classList.add("course-lesson-link");
                                        linkChild.setAttribute("custom-chapter-index", "");
                                        linkChild.id = "lesson-link-" + response.lessonId;
                                        linkChild.href = "";
                                        linkChild.innerHTML = response.title;

                                        divChild.appendChild(iconChild);
                                        divChild.appendChild(linkChild);
                                    } else {
                                        divChild.classList.add("course-lesson-info");

                                        // Create "spanChild" node
                                        for (let k = 1; k <= 2; k++) {
                                            const spanChild = document.createElement("span");

                                            // Add Class For "spanChild" node
                                            spanChild.classList.add("course-lesson-info__item");
                                            spanChild.setAttribute("custom-chapter-index", "");
                                            if (k == 1) {
                                                spanChild.innerHTML = "Ready";
                                            } else {
                                                spanChild.innerHTML = "21:27";
                                            }

                                            divChild.appendChild(spanChild);
                                        }
                                    }
                                    div.appendChild(divChild);
                                }
                            } else if (i == 2) {
                                // Add Class For "div" node
                                div.classList.add("course-lesson-expand");

                                // Create "buttonChild" node
                                const buttonChild = document.createElement("button");

                                // Add Class For "buttonChild" node
                                buttonChild.classList.add("lesson-expand-exercises_btn", "btn-restart");
                                buttonChild.setAttribute("custom-chapter-index", "");
                                buttonChild.id = "expand-exercise-btn-" + response.lessonId;
                                buttonChild.type = "button";

                                // Create "iconChild" node
                                const iconChild = document.createElement("i");

                                // Add Class For "iconChild" node
                                iconChild.classList.add("fa-solid", "fa-network-wired");
                                iconChild.setAttribute("custom-chapter-index", "");

                                buttonChild.appendChild(iconChild);
                                buttonChild.innerHTML += "3 Exercises";

                                div.appendChild(buttonChild);

                                // Click Expand Exercise And Show Item, TreeView
                                // Toggle Expand Exercise List
                                buttonChild.addEventListener("click", function () {
                                    ToggleExpandExercise(buttonChild);

                                    // Display Tree View
                                    const exerciseLists = document.querySelectorAll(".course-exercise-list");
                                    if (exerciseLists) {
                                        exerciseLists.forEach(item => {
                                            // Tree View For List and Item
                                            if (item) {
                                                CreateItemTreeView(item);
                                            }
                                        });
                                    }
                                });
                            } else {
                                // Add Class For "div" node
                                div.classList.add("course-lesson-settings");

                                // Create "buttonChild" node
                                const buttonChild = document.createElement("button");

                                // Add Class For "buttonChild" node
                                buttonChild.classList.add("course-lesson-settings__btn", "btn-restart");
                                buttonChild.id = "lesson-settings-" + response.lessonId;
                                buttonChild.setAttribute("custom-chapter-index", "");
                                buttonChild.type = "button";

                                // Create "iconChild" node
                                const iconChild = document.createElement("i");

                                // Add Class For "iconChild" node
                                iconChild.classList.add("fa-solid", "fa-gear");
                                iconChild.setAttribute("custom-chapter-index", "");

                                buttonChild.appendChild(iconChild);
                                div.appendChild(buttonChild);
                            }
                            li.appendChild(div);
                        }

                        // Create "ulExercise" node
                        const ulExercise = document.createElement("ul");

                        // Add Class For "ulExercise" node
                        ulExercise.classList.add("course-exercise-list");
                        ulExercise.setAttribute("custom-chapter-index", "");
                        ulExercise.id = "exercise-list-" + response.lessonId;

                        for (let i = 1; i <= 2; i++) {
                            // Create "liExercise" node
                            const liExercise = document.createElement("li");

                            // Add Class For "liExercise" node
                            liExercise.classList.add("course-exercise-list__item");
                            liExercise.setAttribute("custom-chapter-index", "");

                            // Create "divExercise" node
                            const divExercise = document.createElement("div");
                            divExercise.setAttribute("custom-chapter-index", "");

                            // Add Class For "divExercise" node
                            divExercise.classList.add("course-exercise-item-container");

                            // Create "divChildExercise" node
                            const divChildExercise = document.createElement("div");

                            // Add Class For "divChildExercise" node
                            divChildExercise.classList.add("course-exercise-action");
                            divChildExercise.setAttribute("custom-chapter-index", "");

                            if (i == 1) {
                                divChildExercise.innerHTML = "No Exercise Found";
                            } else {
                                // Create "buttonChildExercise" node
                                const buttonChildExercise = document.createElement("button");

                                // Add Class For "buttonChildExercise" node
                                buttonChildExercise.classList.add("course-exercise-btn", "create-exercise-btn", "btn-restart");
                                buttonChildExercise.setAttribute("custom-chapter-index", "");
                                buttonChildExercise.type = "button";

                                // Create "iconChildExercise" node
                                const iconChildExercise = document.createElement("i");

                                // Add Class For "iconChildExercise" node
                                iconChildExercise.classList.add("new-chapter-icon", "fa-solid", "fa-plus");
                                iconChildExercise.setAttribute("custom-chapter-index", "");

                                buttonChildExercise.appendChild(iconChildExercise);
                                buttonChildExercise.innerHTML += "Exercise";

                                divChildExercise.appendChild(buttonChildExercise);
                            }

                            divExercise.appendChild(divChildExercise);
                            liExercise.appendChild(divExercise);
                            ulExercise.appendChild(liExercise);
                        }

                        // Remove Not Found Lesson.
                        for (let i = 0; i < ul.children.length; i++) {
                            if (ul.children[i].id == "not-found-lesson-item") {
                                ul.removeChild(ul.children[i]);
                            }
                        }

                        // Append New Lesson Item Into List
                        li.appendChild(ulExercise);
                        ul.insertBefore(li, ul.children[ul.children.length - 1]);

                        // Show Setting For Specific Lesson When Click Setting Lesson Button
                        const lessonSettingBtnClone = document.getElementById("lesson-settings-" + response.lessonId);
                        lessonSettingBtnClone.addEventListener("click", function () {
                            ControlIsShowSettings(lessonSettingBtnClone);
                            //console.log("ChapterId: " + currChapterId);
                            //console.log(typeof currChapterId);
                            ToggleChangeButtonIcon(lessonSettingBtnClone);
                            ToggleShowSettings(lessonSettingBtnClone);

                            // Change Setting Group Id
                            ChangeSettingGroupId(lessonSettingBtnClone);

                            // Handle Switch Settings Button
                            if (currChapterId != 0) {
                                currChapterId = 0;
                            }

                            if (isSwitchSettings == true) {
                                isSwitchSettings = false;
                            }

                            // Assign current Lesson Id
                            currLessonId = Number.parseInt(lessonSettingBtnClone.id.slice(lessonSettingBtnClone.id.lastIndexOf('-') + 1));
                        });

                        // Count Total Lesson And Added Into Lesson Info
                        totalLesson = ul.children.length - 1;
                        const totalLessonInfo = document.getElementById("total-lesson-info-" + response.chapterId);
                        if (totalLessonInfo != null && totalLessonInfo != "") {
                            if (totalLesson <= 1 && totalLesson >= 0) {
                                totalLessonInfo.innerHTML = `${totalLesson} Lesson`;
                            } else if (totalLesson > 1) {
                                totalLessonInfo.innerHTML = `${totalLesson} Lessons`;
                            }
                        }

                        totalLesson = 0;

                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Create Lesson \"Invalid Request Information.\"");
                }
            }

            //let url = editForm.action;
            let url = `/Manage/Courses/Chapters/Create?handler=CreateCourseLesson`;
            let data = new FormData(lessonForm);
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send(data);
        }

        // Function: Ajax post edit lesson
        function PostEditLessonFormAjax(lessonForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);
                    if (response != undefined && response != null) {
                        console.log(response);

                        document.getElementById("lesson-link-" + response.lessonId).innerHTML = response.title;
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Edit Lesson \"Invalid Request Information.\"");
                }
            }

            //let url = editForm.action;
            let url = `/Manage/Courses/Chapters/Edit?&handler=EditLessonContent`;
            let data = new FormData(lessonForm);
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send(data);
        }

        // Function: Post Remove Lesson Form Ajax
        function PostRemoveLessonFormAjax(removeForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);

                    if (response != undefined && response != null) {
                        console.log(response);

                        // Remove Lesson Item From List
                        const LessonList = document.getElementById("lesson-list-" + response.chapterId);

                        // If list not empty (include add lesson button in list item, that's why > 1 not 0)
                        if (LessonList.children.length > 1) {
                            for (let i = 0; i < LessonList.children.length; i++) {
                                if (Number.parseInt(LessonList.children[i].id.slice(LessonList.children[i].id.lastIndexOf('-') + 1)) == response.lessonId) {
                                    LessonList.removeChild(LessonList.children[i]);
                                }
                            }
                        }

                        // If list empty (include add chapter button in list item, that's why <= 1 not 0)
                        if (LessonList.children.length > 0 && LessonList.children.length <= 1) {
                            const html = `  <li class="course-lesson-list__item" id="not-found-lesson-item">
                                                                <div class="course-lesson-item-container">
                                                                    <div class="course-lesson-action">
                                                                        No Lesson Found.
                                                                    </div>
                                                                </div>
                                                            </li>`;
                            // Create "li" node
                            const li = document.createElement("li");

                            // Add Class For "li" node
                            li.classList.add("course-lesson-list__item");
                            li.id = "not-found-lesson-item";
                            li.setAttribute("custom-chapter-index", "");

                            // Create "div" node
                            const div = document.createElement("div");

                            // Add Class For "div" node
                            div.classList.add("course-lesson-item-container");
                            div.setAttribute("custom-chapter-index", "");

                            // Create "divChild" node
                            const divChild = document.createElement("div");

                            // Add Class For "divChild" node
                            divChild.classList.add("course-lesson-action");
                            divChild.setAttribute("custom-chapter-index", "");

                            // Set Text For "divChild" node
                            divChild.innerHTML = "No Lesson Found.";

                            div.appendChild(divChild);
                            li.appendChild(div);
                            LessonList.insertBefore(li, LessonList.children[LessonList.children.length - 1]);
                        }

                        // Count Total Lesson And Remove Lesson Info
                        if (totalLesson == 0) {
                            totalLesson = LessonList.children.length - 1;
                        }
                        const totalLessonInfo = document.getElementById("total-lesson-info-" + response.chapterId);
                        if (totalLessonInfo != null && totalLessonInfo != "") {
                            if (totalLesson <= 1 && totalLesson >= 0) {
                                totalLessonInfo.innerHTML = `${totalLesson} Lesson`;
                            } else if (totalLesson > 1) {
                                totalLessonInfo.innerHTML = `${totalLesson} Lessons`;
                            }
                        }

                        totalLesson = 0;
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Remove Lesson \"Invalid Request Information.\"");
                }
            }

            let url = ``;
            let data = new FormData(removeForm);
            if (data.has("CourseLesson.LessonId")) {
                url = `/Manage/Courses/Chapters/Delete?id=${data.get("CourseLesson.LessonId")}&handler=DeleteCourseLesson`;
            }
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send();
        }

        // Function: Post Create Exercise Form Ajax
        function PostCreateExerciseFormAjax(exerciseForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);
                    if (response != undefined && response != null) {
                        console.log(response);

                        // Clear Exercise Create Form Modal
                        ClearFormModal(document.getElementById("create-exercise-modal").id);

                        // Append New Exercise Item
                        const html = `
                        <li class="course-exercise-list__item">
                            <div class="course-exercise-item-container">
                                <div class="course-exercise-action">
                                    <i class="fa-solid fa-note-sticky"></i>
                                    <a href="" class="course-exercise-link">Exercise 1</a>
                                </div>
                            </div>
                            <div class="course-exercise-settings">
                                <button type="button" class="course-exercise-settings__btn btn-restart"><i class="fa-solid fa-gear"></i></button>
                            </div>
                        </li>
                        `;

                        // Exercise List
                        const ul = document.getElementById("exercise-list-" + response.lessonId);

                        // Create "li" node
                        const li = document.createElement("li");

                        // Add Class For "li" node
                        li.classList.add("course-exercise-list__item");
                        li.id = "exercise-list-item-" + response.exerciseId;
                        //li.id = `exercise-list-item-${response.lessonId}`
                        li.setAttribute("custom-chapter-index", "");

                        // Create "div" node
                        for(let i = 0; i < 2; i++)
                        {
                            const div = document.createElement("div");
                            if(i == 0)
                            {
                                // Add Class For "div" node
                                div.classList.add("course-exercise-item-container");

                                // Create Child "div" node
                                const child_div = document.createElement("div");

                                // Add Class For Child "div" node
                                child_div.classList.add("course-exercise-action");
                                child_div.setAttribute("custom-chapter-index", "");

                                // Create "Icon" Node
                                const icon = document.createElement("i");

                                // Add Class For "Icon" node
                                icon.classList.add("fa-solid", "fa-note-sticky");
                                icon.setAttribute("custom-chapter-index", "");

                                // Create "Link" node
                                const link = document.createElement("a");

                                // Add Class For "Link" node
                                link.classList.add("course-exercise-link");
                                link.id = "exercise-link-" + response.exerciseId;
                                link.setAttribute("custom-chapter-index", "");
                                link.innerHTML = response.title;

                                // Append Icon and Link Into Child Div
                                child_div.appendChild(icon);
                                child_div.appendChild(link);
                                
                                // Append Child Div Into Div Node
                                div.appendChild(child_div);
                            } else if (i == 1)
                            {
                                // Add Class For "div" node
                                div.classList.add("course-exercise-settings");

                                // Create "button" node
                                const button = document.createElement("button");

                                // Add Class For "button" node
                                button.classList.add("course-exercise-settings__btn", "btn-restart");
                                button.id = "exercise-settings-" + response.exerciseId;
                                button.type = "button";
                                button.setAttribute("custom-chapter-index", "");

                                // Add Event On Click For "Button"
                                // Show Setting For Specific Exercise When Click Setting Exercise Button
                                //const exerciseSettingBtn = document.getElementById("exercise-settings-" + response.exerciseId);
                                button.addEventListener("click", function () {
                                    isExerciseSetting = true;

                                        ControlIsShowSettings(button);
                                        //console.log("ChapterId: " + currChapterId);
                                        //console.log(typeof currChapterId);
                                        ToggleChangeButtonIcon(button);
                                        ToggleShowSettings(button);


                                        // Change Setting Group Id (Xem Lai)
                                        ChangeSettingGroupId(button);

                                        // Handle Switch Settings Button
                                        if (currChapterId != 0) {
                                            currChapterId = 0;
                                        }

                                        if (currLessonId != 0) {
                                            currLessonId = 0;
                                        }

                                        if (isSwitchSettings == true) {
                                            isSwitchSettings = false;
                                        }

                                        // Assign current Exercise Id
                                        currExerciseId = Number.parseInt(button.id.slice(button.id.lastIndexOf('-') + 1));

                                        isExerciseSetting = false;
                                });
                                
                                // Create "icon" node for button
                                const icon = document.createElement("i");

                                // Add Class For "icon" node
                                icon.classList.add("fa-solid", "fa-gear");
                                icon.setAttribute("custom-chapter-index", "");

                                // Append Icon For Button Node
                                button.appendChild(icon);

                                // Append Button Into Div Node
                                div.appendChild(button);
                            }
                            div.setAttribute("custom-chapter-index", "");

                            // Append Div For Li Node
                            li.appendChild(div);
                        }

                        // Insert li node befor another li inside Ul node
                        ul.insertBefore(li, ul.children[ul.children.length - 1]);

                        // Increase Exercise Item By 1
                        const exerciseItem = document.getElementById("expand-exercise-btn-" + response.lessonId);
                        totalExercise = Number.parseInt(exerciseItem.getAttribute("count-item")) + 1;

                        // Create "icon" node
                        const icon = document.createElement("i");

                        // Add Class List Into "icon" node
                        icon.classList.add("fa-solid", "fa-network-wired");
                        icon.setAttribute("custom-chapter-index", "");

                        // Append Icon And Text Into Button
                        if(totalExercise >= 0 && totalExercise <= 1)
                        {
                            exerciseItem.innerHTML = "";
                            // Create text node
                            const textNode = document.createTextNode(totalExercise + " " + "Exercise");

                            exerciseItem.appendChild(icon);
                            exerciseItem.appendChild(textNode);
                            exerciseItem.setAttribute("count-item", totalExercise);
                        } else if(totalExercise > 1)
                        {
                            exerciseItem.innerHTML = "";
                            // Create text node
                            const textNode = document.createTextNode(totalExercise + " " + "Exercises");

                            exerciseItem.appendChild(icon);
                            exerciseItem.appendChild(textNode);
                            exerciseItem.setAttribute("count-item", totalExercise);
                        }

                        // Reset total Exercise
                        totalExercise = 0;

                        // Display Tree View
                        const exerciseLists = document.querySelectorAll(".course-exercise-list");
                        if (exerciseLists) {
                            exerciseLists.forEach(item => {
                                // Tree View For List and Item
                                if (item) {
                                    CreateItemTreeView(item);
                                }
                            });
                        }
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Create Exercise \"Invalid Request Information.\"");
                }
            }

            //let url = editForm.action;
            let url = `/Manage/Courses/Chapters/Create?handler=CreateLessonExercise`;
            let data = new FormData(exerciseForm);
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send(data);
        }

        // Function: Ajax post edit exercise
        function PostEditExerciseFormAjax(exerciseForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);
                    if (response != undefined && response != null) {
                        console.log(response);

                        document.getElementById("exercise-link-" + response.exerciseId).innerHTML = response.title;
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Edit Exercise \"Invalid Request Information.\"");
                }
            }

            //let url = editForm.action;
            let url = `/Manage/Courses/Chapters/Edit?&handler=EditExerciseContent`;
            let data = new FormData(exerciseForm);
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send(data);
        }

        // Function: Post Remove Exercise Form Ajax
        function PostRemoveExerciseFormAjax(removeForm) {
            // Create an XMLHttpRequest object
            const xhttp = new XMLHttpRequest();

            // Define a callback function
            xhttp.onload = function () {
                if (xhttp.status === 200) {
                    // What to do when the response is ready
                    let response = JSON.parse(xhttp.responseText);

                    if (response != undefined && response != null) {
                        console.log(response);

                        // Remove Exercise Item From List
                        const ExerciseList = document.getElementById("exercise-list-" + response.lessonId);

                        // If list not empty (include add exercise button in list item, that's why > 1 not 0)
                        if (ExerciseList.children.length > 1) {
                            for (let i = 0; i < ExerciseList.children.length; i++) {
                                if (Number.parseInt(ExerciseList.children[i].id.slice(ExerciseList.children[i].id.lastIndexOf('-') + 1)) == response.exerciseId) {
                                    ExerciseList.removeChild(ExerciseList.children[i]);
                                }
                            }
                        }

                        // Decrease Exercise Item By 1
                        const exerciseItem = document.getElementById("expand-exercise-btn-" + response.lessonId);
                        ExerciseRemain = Number.parseInt(exerciseItem.getAttribute("count-item")) - 1;

                        // Create "icon" node
                        const icon = document.createElement("i");

                        // Add Class List Into "icon" node
                        icon.classList.add("fa-solid", "fa-network-wired");
                        icon.setAttribute("custom-chapter-index", "");

                        // Append Icon And Text Into Button
                        if(ExerciseRemain >= 0 && ExerciseRemain <= 1)
                        {
                            exerciseItem.innerHTML = "";
                            // Create text node
                            const textNode = document.createTextNode(ExerciseRemain + " " + "Exercise");

                            exerciseItem.appendChild(icon);
                            exerciseItem.appendChild(textNode);
                            exerciseItem.setAttribute("count-item", ExerciseRemain);
                        } else if(ExerciseRemain > 1)
                        {
                            exerciseItem.innerHTML = "";
                            // Create text node
                            const textNode = document.createTextNode(ExerciseRemain + " " + "Exercises");

                            exerciseItem.appendChild(icon);
                            exerciseItem.appendChild(textNode);
                            exerciseItem.setAttribute("count-item", ExerciseRemain);
                        }

                        // Reset Remain Exercise
                        ExerciseRemain = 0;
                    } else {
                        alert("Data Not Found.");
                    }
                } else {
                    //alert(xhttp.status);
                    alert("Cannot Remove Exercise \"Invalid Request Information.\"");
                }
            }

            let url = ``;
            let data = new FormData(removeForm);
            if (data.has("CourseExercise.ExerciseId")) {
                url = `/Manage/Courses/Chapters/Delete?id=${data.get("CourseExercise.ExerciseId")}&handler=DeleteCourseExercise`;
            }
            // Send a request
            xhttp.open("POST", url);
            xhttp.setRequestHeader("RequestVerificationToken", data.get('__RequestVerificationToken'));
            xhttp.send();
        }


        // Function: Toggle Expand Lesson
        function ToggleExpandLesson(expandLessonButton) {
            const lessonLists = document.querySelectorAll(".course-lesson-list");
            lessonLists.forEach(item => {
                if (item.getAttribute("id")) {
                    if (item.getAttribute("id").slice(item.getAttribute("id").lastIndexOf('-') + 1) == expandLessonButton.getAttribute("id").slice(expandLessonButton.getAttribute("id").lastIndexOf('-') + 1)) {
                        item.classList.toggle("show");
                    }
                }
            });
        }

        // Function: Toggle Expand Exercise
        function ToggleExpandExercise(expandExerciseButton) {
            const exerciseLists = document.querySelectorAll(".course-exercise-list");
            exerciseLists.forEach(item => {
                if (item.getAttribute("id")) {
                    if (item.getAttribute("id").slice(item.getAttribute("id").lastIndexOf('-') + 1) == expandExerciseButton.getAttribute("id").slice(expandExerciseButton.getAttribute("id").lastIndexOf('-') + 1)) {
                        item.classList.toggle("show");
                    }
                }
            });
        }

        // Function: Control isShowSettings
        function ControlIsShowSettings(settingButton) {
            if (settingButton.id.match("chapter")) {
                if (currChapterId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currChapterId != 0) {
                    isShowSettings = false;
                    //console.log("Another Setting Btn");
                }

                if (currLessonId != 0 || currExerciseId != 0) {
                    isSwitchSettings = true;
                }

                if (isSwitchSettings == true) {
                    isShowSettings = false;
                }

                if (isShowSettings == false) {
                    isShowSettings = true;
                } else {
                    isShowSettings = false;
                }

                console.log(isShowSettings);
            } else if (settingButton.id.match("lesson")) {
                if (currLessonId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currLessonId != 0) {
                    isShowSettings = false;
                    //console.log("Another Setting Btn");
                }

                if (currChapterId != 0 || currExerciseId != 0) {
                    isSwitchSettings = true;
                }

                if (isSwitchSettings == true) {
                    isShowSettings = false;
                }

                if (isShowSettings == false) {
                    isShowSettings = true;
                } else {
                    isShowSettings = false;
                }

                console.log(isShowSettings);
            } else if (settingButton.id.match("exercise")) {
                if (currExerciseId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currExerciseId != 0) {
                    isShowSettings = false;
                    //console.log("Another Setting Btn");
                }

                if (currChapterId != 0 || currLessonId != 0) {
                    isSwitchSettings = true;
                }

                if (isSwitchSettings == true) {
                    isShowSettings = false;
                }

                if (isShowSettings == false) {
                    isShowSettings = true;
                } else {
                    isShowSettings = false;
                }

                console.log(isShowSettings);
            }
        }

        // Function: Change icon of setting button to x-mark or default base on isShowSettings
        function ToggleChangeButtonIcon(settingButton) {
            if (settingButton.id.match("chapter")) {
                if (currChapterId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currChapterId != 0) {
                    const previousSettingBtn = document.getElementById("chapter-settings-" + currChapterId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (currLessonId != 0) {
                    const previousSettingBtn = document.getElementById("lesson-settings-" + currLessonId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (currExerciseId != 0) {
                    const previousSettingBtn = document.getElementById("exercise-settings-" + currExerciseId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (isShowSettings == true) {
                    settingButton.style.backgroundColor = "red";
                    if (settingButton.firstElementChild.classList.contains("fa-gear")) {
                        settingButton.firstElementChild.classList.replace("fa-gear", "fa-xmark");
                    }
                } else {
                    settingButton.style.backgroundColor = null;
                    if (settingButton.firstElementChild.classList.contains("fa-xmark")) {
                        settingButton.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }
            } else if (settingButton.id.match("lesson")) {
                if (currLessonId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currLessonId != 0) {
                    const previousSettingBtn = document.getElementById("lesson-settings-" + currLessonId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (currChapterId != 0) {
                    const previousSettingBtn = document.getElementById("chapter-settings-" + currChapterId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (currExerciseId != 0) {
                    const previousSettingBtn = document.getElementById("exercise-settings-" + currExerciseId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (isShowSettings == true) {
                    settingButton.style.backgroundColor = "red";
                    if (settingButton.firstElementChild.classList.contains("fa-gear")) {
                        settingButton.firstElementChild.classList.replace("fa-gear", "fa-xmark");
                    }
                } else {
                    settingButton.style.backgroundColor = null;
                    if (settingButton.firstElementChild.classList.contains("fa-xmark")) {
                        settingButton.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }
            } else if (settingButton.id.match("exercise")) {
                if (currExerciseId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currExerciseId != 0) {
                    const previousSettingBtn = document.getElementById("exercise-settings-" + currExerciseId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (currChapterId != 0) {
                    const previousSettingBtn = document.getElementById("chapter-settings-" + currChapterId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if(currLessonId != 0) {
                    const previousSettingBtn = document.getElementById("lesson-settings-" + currLessonId);

                    previousSettingBtn.style.backgroundColor = null;
                    if (previousSettingBtn.firstElementChild.classList.contains("fa-xmark")) {
                        previousSettingBtn.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }

                if (isShowSettings == true) {
                    settingButton.style.backgroundColor = "red";
                    if (settingButton.firstElementChild.classList.contains("fa-gear")) {
                        settingButton.firstElementChild.classList.replace("fa-gear", "fa-xmark");
                    }
                } else {
                    settingButton.style.backgroundColor = null;
                    if (settingButton.firstElementChild.classList.contains("fa-xmark")) {
                        settingButton.firstElementChild.classList.replace("fa-xmark", "fa-gear");
                    }
                }
            }
        }

        // Function: Show Settings or hide Settings base on isShowSettings
        function ToggleShowSettings(settingButton) {
            const contentExpandAllButton = document.querySelector(".course-content-action-btn");
            const settingsGroup = document.querySelector(".course-settings-action");

            if (settingButton.id.match("chapter")) {
                if (currChapterId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currChapterId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (currLessonId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (currExerciseId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (isShowSettings == true) {
                    if (contentExpandAllButton) {
                        contentExpandAllButton.classList.add("hide");
                    }

                    if (settingsGroup) {
                        settingsGroup.classList.add("show");
                    }
                } else {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }
            } else if (settingButton.id.match("lesson")) {
                if (currLessonId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currLessonId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (currChapterId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }
                
                if (currExerciseId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (isShowSettings == true) {
                    if (contentExpandAllButton) {
                        contentExpandAllButton.classList.add("hide");
                    }

                    if (settingsGroup) {
                        settingsGroup.classList.add("show");
                    }
                } else {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }
            } else if (settingButton.id.match("exercise")) {
                if (currExerciseId != Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1)) && currExerciseId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (currChapterId != 0) {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (currLessonId != 0)
                {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }

                if (isShowSettings == true) {
                    if (contentExpandAllButton) {
                        contentExpandAllButton.classList.add("hide");
                    }

                    if (settingsGroup) {
                        settingsGroup.classList.add("show");
                    }
                } else {
                    if (contentExpandAllButton.classList.contains("hide")) {
                        contentExpandAllButton.classList.remove("hide");
                    }

                    if (settingsGroup.classList.contains("show")) {
                        settingsGroup.classList.remove("show");
                    }
                }
            }
        }

        // Function: Reset Setting State
        function ResetSettingState(formId) {
            if (formId.match("chapter")) {
                const settingButton = document.getElementById("chapter-settings-" + currChapterId);
                isShowSettings = false;
                ToggleChangeButtonIcon(settingButton);
                ToggleShowSettings(settingButton);
                //currChapterId = Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1));
                currChapterId = 0;
                //console.log(typeof currChapterId);
            } else if (formId.match("lesson")) {
                const settingButton = document.getElementById("lesson-settings-" + currLessonId);
                isShowSettings = false;
                ToggleChangeButtonIcon(settingButton);
                ToggleShowSettings(settingButton);
                //currLessonId = Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1));
                currLessonId = 0;
                //console.log(typeof currLessonId);
            } else if (formId.match("exercise")) {
                const settingButton = document.getElementById("exercise-settings-" + currExerciseId);
                isShowSettings = false;
                ToggleChangeButtonIcon(settingButton);
                ToggleShowSettings(settingButton);
                //currLessonId = Number.parseInt(settingButton.id.slice(settingButton.id.lastIndexOf('-') + 1));
                currExerciseId = 0;
                //console.log(typeof currLessonId);
            } 
        }

        // Function: Get Edit Data
        function GetEditData(formId) {
            // Get Edit Chapter Data
            if (formId.slice(formId.lastIndexOf('-') + 1) == "chapter") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal edit chapter title
                            document.getElementById("edit-chapter-header").innerHTML = response.title;
                            // Add data into modal edit chapter form field
                            document.getElementById("edit-chapter-id").value = response.chapterId;

                            document.getElementById("edit-chapter-title").value = response.title;


                            // Focus Input Field
                            const editChapterInput = document.getElementById("edit-chapter-title");
                            if (editChapterInput.value != null) {
                                MoveLabelToTop(editChapterInput);
                            }

                            if (document.getElementById("edit-chapter-desc")) {
                                document.getElementById("edit-chapter-desc").value = response.description;
                                for (let i = 0; i < document.getElementById("edit-chapter-desc").nextElementSibling.children.length; i++) {
                                    if (document.getElementById("edit-chapter-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                        for (let j = 0; j < document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children.length; j++) {
                                            if (document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-chapter-desc").value != null) {
                                                document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].style.display = "none";
                                            }

                                            if (document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                                document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].innerHTML = response.description;
                                            }
                                        }
                                    }
                                }

                            }
                            document.getElementById("edit-chapter-status").value = response.status;
                            if (response.status == 1) {
                                document.getElementById("edit-chapter-content-available").checked = true;
                            } else if (response.status == 0) {
                                document.getElementById("edit-chapter-content-not-available").checked = true;
                            }

                            // Prevent Select Multiple Checkbox For Create Chapter And Assign Value For Chapter Status Input Field
                            const editCheckboxsChapter = document.querySelectorAll(".edit-form-checkbox-chapter");
                            editCheckboxsChapter.forEach(item => {
                                item.addEventListener("click", function () {
                                    for (let i = 0; i < editCheckboxsChapter.length; i++) {
                                        editCheckboxsChapter[i].checked = false;
                                    }

                                    item.checked = true;
                                    const editChapterStatusInput = document.getElementById("edit-chapter-status");
                                    if (item.id == "edit-chapter-content-available" && editChapterStatusInput) {

                                        editChapterStatusInput.value = 1;
                                    }
                                    else {
                                        editChapterStatusInput.value = 0;
                                    }

                                });
                            });
                            document.getElementById("edit-chapter-created-date").value = response.created_date;
                            document.getElementById("edit-chapter-courseId").value = response.courseId;
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Chapter Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Edit?id=${currChapterId}&Content=Chapter&handler=EditCourseContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            } else if (formId.slice(formId.lastIndexOf('-') + 1) == "lesson") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal edit lesson title
                            document.getElementById("edit-lesson-header").innerHTML = response.title;
                            // Add data into modal edit lesson form field
                            document.getElementById("edit-lesson-id").value = response.lessonId;

                            document.getElementById("edit-lesson-title").value = response.title;


                            // Focus Input Field
                            const editLessonInput = document.getElementById("edit-lesson-title");
                            if (editLessonInput.value != null) {
                                MoveLabelToTop(editLessonInput);
                            }

                            if (document.getElementById("edit-lesson-desc")) {
                                document.getElementById("edit-lesson-desc").value = response.description;
                                for (let i = 0; i < document.getElementById("edit-lesson-desc").nextElementSibling.children.length; i++) {
                                    if (document.getElementById("edit-lesson-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                        for (let j = 0; j < document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children.length; j++) {
                                            if (document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-lesson-desc").value != null) {
                                                document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].style.display = "none";
                                            }

                                            if (document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                                document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].innerHTML = response.description;
                                            }
                                        }
                                    }
                                }

                            }

                            if (response.video != null) {
                                document.getElementById("hidden-lesson-video").value = response.video;
                                document.getElementById("edit-lesson-video-source").src = `/Assets/uploads/video/${response.video}`;
                            }

                            document.getElementById("edit-hidden-lesson-achievement").value = response.achievement;

                            console.log(`Total Achievement Item: ${response.achievement.split(",").length}`);

                            for (let i = 0; i < response.achievement.split(",").length; i++) {
                                const NewLessonAchievementBtn = document.getElementById("edit-create-lesson-achievement");
                                AppendAchievementItem(NewLessonAchievementBtn);
                                const input = document.getElementById("edit-lesson-achievement-remove-" + (i + 1));
                                input.previousElementSibling.value = `${response.achievement.split(",")[i]}`;
                            }

                            document.getElementById("edit-course-lesson-status").value = response.status;
                            if (response.status == 1) {
                                document.getElementById("edit-lesson-content-available").checked = true;
                            } else if (response.status == 0) {
                                document.getElementById("edit-lesson-content-not-available").checked = true;
                            }

                            document.getElementById("edit-lesson-created-date").value = response.created_date;

                            document.getElementById("edit-course-lesson-chapter-id").value = response.chapterId;

                            // Prevent Select Multiple Checkbox For Edit Lesson And Assign Value For Lesson Status Input Field
                            const editCheckboxsLesson = document.querySelectorAll(".edit-form-checkbox-lesson");
                            editCheckboxsLesson.forEach(item => {
                                item.addEventListener("click", function () {
                                    for (let i = 0; i < editCheckboxsLesson.length; i++) {
                                        editCheckboxsLesson[i].checked = false;
                                    }

                                    item.checked = true;

                                    const editLessonStatusInput = document.getElementById("edit-course-lesson-status");
                                    if (item.id == "edit-lesson-content-available" && editLessonStatusInput) {

                                        editLessonStatusInput.value = 1;
                                    }
                                    else {
                                        editLessonStatusInput.value = 0;
                                    }
                                });
                            });
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Lesson Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Edit?id=${currLessonId}&Content=Lesson&handler=EditCourseContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            } else if (formId.slice(formId.lastIndexOf('-') + 1) == "exercise") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal edit exercise input field
                            
                            document.getElementById("edit-exercise-header").innerHTML = response.title;
                            
                            document.getElementById("edit-exercise-id").value = response.exerciseId;

                            document.getElementById("edit-exercise-title").value = response.title;


                            // Focus Input Field
                            const editExerciseInput = document.getElementById("edit-exercise-title");
                            if (editExerciseInput.value != null) {
                                MoveLabelToTop(editExerciseInput);
                            }

                            if (document.getElementById("edit-exercise-desc")) {
                                document.getElementById("edit-exercise-desc").value = response.description;
                                for (let i = 0; i < document.getElementById("edit-exercise-desc").nextElementSibling.children.length; i++) {
                                    if (document.getElementById("edit-exercise-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                        for (let j = 0; j < document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children.length; j++) {
                                            if (document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-exercise-desc").value != null) {
                                                document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].style.display = "none";
                                            }

                                            if (document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                                document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].innerHTML = response.description;
                                            }
                                        }
                                    }
                                }

                            }

                            if (document.getElementById("edit-exercise-content")) {
                                document.getElementById("edit-exercise-content").value = response.content;
                                for (let i = 0; i < document.getElementById("edit-exercise-content").nextElementSibling.children.length; i++) {
                                    if (document.getElementById("edit-exercise-content").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                        for (let j = 0; j < document.getElementById("edit-exercise-content").nextElementSibling.children[i].children.length; j++) {
                                            if (document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-exercise-content").value != null) {
                                                document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].style.display = "none";
                                            }

                                            if (document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                                document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].innerHTML = response.content;
                                            }
                                        }
                                    }
                                }

                            }

                            document.getElementById("edit-course-exercise-status").value = response.status;
                            if (response.status == 1) {
                                document.getElementById("edit-exercise-content-available").checked = true;
                            } else if (response.status == 0) {
                                document.getElementById("edit-exercise-content-not-available").checked = true;
                            }

                            document.getElementById("edit-exercise-created-date").value = response.created_date;
                            document.getElementById("edit-course-exercise-lesson-id").value = response.lessonId;

                            // Prevent Select Multiple Checkbox For Edit Lesson And Assign Value For Lesson Status Input Field
                            const editCheckboxsExercise = document.querySelectorAll(".edit-form-checkbox-exercise");
                            editCheckboxsExercise.forEach(item => {
                                item.addEventListener("click", function () {
                                    for (let i = 0; i < editCheckboxsExercise.length; i++) {
                                        editCheckboxsExercise[i].checked = false;
                                    }

                                    item.checked = true;

                                    const editExerciseStatusInput = document.getElementById("edit-course-exercise-status");
                                    if (item.id == "edit-exercise-content-available" && editExerciseStatusInput) {

                                        editExerciseStatusInput.value = 1;
                                    }
                                    else {
                                        editExerciseStatusInput.value = 0;
                                    }
                                });
                            });
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Exercise Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Edit?id=${currExerciseId}&Content=Exercise&handler=EditCourseContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            }
        }

        // Function: Get Details Data
        function GetDetailsData(formId) {
            // Get Details Chapter Data
            if (formId.slice(formId.lastIndexOf('-') + 1) == "chapter") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal details chapter
                            document.getElementById("details-chapter-header").innerHTML = response.title;
                            document.getElementById("details-chapter-id").innerHTML = response.chapterId;
                            document.getElementById("details-chapter-title").innerHTML = response.title;
                            document.getElementById("details-chapter-desc").innerHTML = response.description;
                            document.getElementById("details-chapter-status").innerHTML = response.status;
                            document.getElementById("details-chapter-created-date").innerHTML = new Date(response.created_date);
                            document.getElementById("details-chapter-updated-date").innerHTML = new Date(response.updated_date);
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Chapter Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Details?id=${currChapterId}&handler=DetailsCourseContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            } else if (formId.slice(formId.lastIndexOf('-') + 1) == "lesson") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal details lesson
                            document.getElementById("details-lesson-header").innerHTML = response.title;
                            document.getElementById("details-lesson-id").innerHTML = response.lessonId;
                            document.getElementById("details-lesson-title").innerHTML = response.title;
                            document.getElementById("details-lesson-desc").innerHTML = response.description;
                            document.getElementById("details-lesson-content").innerHTML = response.content;

                            if (response.video != null && response.video != "") {
                                document.getElementById("details-lesson-video-source").src = `/Assets/uploads/video/${response.video}`;
                            }

                            const ul = document.getElementById("details-lesson-achievement");
                            if (document.getElementById("details-achievement-item-no-found") != null) {
                                ul.removeChild(document.getElementById("details-achievement-item-no-found"));
                            }
                            for (let i = 0; i < response.achievement.split(',').length; i++) {
                                const html = ` <li class="details-list-achievement__item ml-16">
                                                                            No Achievement Found.
                                                                        </li>`
                                // Create "li" node
                                const li = document.createElement("li");

                                // Add Class For "li" node
                                li.classList.add("details-list-achievement__item", "ml-16");
                                li.innerHTML = response.achievement.split(',')[i];
                                ul.appendChild(li);
                            }
                            document.getElementById("details-lesson-status").innerHTML = response.status;
                            document.getElementById("details-lesson-created-date").innerHTML = new Date(response.created_date);
                            document.getElementById("details-lesson-updated-date").innerHTML = new Date(response.updated_date);

                            const expandLessonBtns = document.querySelectorAll(".expand-lesson-btn");

                            expandLessonBtns.forEach(item => {
                                if (item.id.slice(item.id.lastIndexOf('-') + 1) == response.chapterId) {
                                    document.getElementById("details-lesson-chapter-id").innerHTML = item.innerHTML;
                                }
                            });
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Lesson Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Details?id=${currLessonId}&handler=DetailsLessonContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            } else if (formId.slice(formId.lastIndexOf('-') + 1) == "exercise") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal details lesson
                            document.getElementById("details-exercise-header").innerHTML = response.title;
                            document.getElementById("details-exercise-id").innerHTML = response.exerciseId;
                            document.getElementById("details-exercise-title").innerHTML = response.title;
                            document.getElementById("details-exercise-desc").innerHTML = response.description;
                            document.getElementById("details-exercise-content").innerHTML = response.content;

                            document.getElementById("details-exercise-status").innerHTML = response.status;
                            document.getElementById("details-exercise-created-date").innerHTML = new Date(response.created_date);
                            document.getElementById("details-exercise-updated-date").innerHTML = new Date(response.updated_date);

                            const lessonLinks = document.querySelectorAll(".course-lesson-link");

                            lessonLinks.forEach(item => {
                                if (item.id.slice(item.id.lastIndexOf('-') + 1) == response.lessonId) {
                                    document.getElementById("details-exercise-lesson-id").innerHTML = item.innerHTML;
                                }
                            });
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Exercise Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Details?id=${currExerciseId}&handler=DetailsExerciseContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            }
        }

        // Function: Get Delete Data
        function GetDeleteData(formId) {
            // Get Delete Chapter Data
            if (formId.slice(formId.lastIndexOf('-') + 1) == "chapter") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal delete chapter
                            document.getElementById("delete-chapter-header").innerHTML = response.title;
                            document.getElementById("delete-chapter-title").innerHTML = response.title;
                            document.getElementById("delete-chapter-id").value = response.chapterId;
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Chapter Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Delete?id=${currChapterId}&handler=DeleteCourseContent`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            } else if (formId.slice(formId.lastIndexOf('-') + 1) == "lesson") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal delete chapter
                            document.getElementById("delete-lesson-header").innerHTML = response.title;
                            document.getElementById("delete-lesson-title").innerHTML = response.title;
                            document.getElementById("delete-lesson-id").value = response.lessonId;

                            const expandLessonBtns = document.querySelectorAll(".expand-lesson-btn");

                            expandLessonBtns.forEach(item => {
                                if (item.id.slice(item.id.lastIndexOf('-') + 1) == response.chapterId) {
                                    document.getElementById("delete-lesson-from-header").innerHTML = item.innerHTML;
                                }
                            });
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Lesson Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Delete?id=${currLessonId}&handler=DeleteCourseLesson`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            } else if (formId.slice(formId.lastIndexOf('-') + 1) == "exercise") {
                // Create an XMLHttpRequest object
                const xhttp = new XMLHttpRequest();

                // Define a callback function
                xhttp.onload = function () {
                    if (xhttp.status === 200) {
                        // What to do when the response is ready
                        let response = JSON.parse(xhttp.responseText);
                        if (response != undefined && response != null) {
                            console.log(response);

                            // Add data into modal delete chapter
                            document.getElementById("delete-exercise-header").innerHTML = response.title;
                            document.getElementById("delete-exercise-title").innerHTML = response.title;
                            document.getElementById("delete-exercise-id").value = response.exerciseId;

                            const lessonLinks = document.querySelectorAll(".course-lesson-link");

                            lessonLinks.forEach(item => {
                                if (item.id.slice(item.id.lastIndexOf('-') + 1) == response.lessonId) {
                                    document.getElementById("delete-exercise-from-lesson").innerHTML = item.innerHTML;
                                }
                            });
                        }
                        else {
                            alert("Data Not Found.");
                        }
                    }
                    else {
                        //alert(xhttp.status);
                        alert("Cannot Get Exercise Data \"Invalid Request Information.\"");
                    }
                }

                let url = `/Manage/Courses/Chapters/Delete?id=${currExerciseId}&handler=DeleteCourseExercise`;
                // Send a request
                xhttp.open("GET", url);
                //xhttp.setRequestHeader("Content-type", "multipart/form-data");
                xhttp.send();
            }
        }

        // Function: Clear Form Modal
        function ClearFormModal(closeCRUDElement) {
            if (closeCRUDElement.match("chapter") != null) {
                if (closeCRUDElement.match("create") != null) {
                    // Remove modal form input field
                    document.getElementById("chapter-title").value = null;

                    // Reset Input Field
                    const inputs = document.querySelectorAll(".form-input");
                    inputs.forEach(item => {
                        if (item.id == "chapter-title") {
                            MoveLabelToDefault(item);
                        }
                    });

                    if (document.getElementById("chapter-desc")) {
                        document.getElementById("chapter-desc").value = null;
                        for (let i = 0; i < document.getElementById("chapter-desc").nextElementSibling.children.length; i++) {
                            if (document.getElementById("chapter-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("chapter-desc").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("chapter-desc").value == "") {
                                        document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("chapter-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }
                    document.getElementById("course-chapter-status").value = null;
                    if (document.getElementById("chapter-content-available").checked == true) {
                        document.getElementById("chapter-content-available").checked = false;
                    }

                    if (document.getElementById("chapter-content-not-available").checked == true) {
                        document.getElementById("chapter-content-not-available").checked = false;
                    }
                }
                if (closeCRUDElement.match("edit") != null) {
                    // Remove Edit modal form input field
                    document.getElementById("edit-chapter-header").innerHTML = "Chapter";

                    document.getElementById("edit-chapter-id").value = null;

                    document.getElementById("edit-chapter-title").value = null;

                    if (document.getElementById("edit-chapter-desc")) {
                        document.getElementById("edit-chapter-desc").value = null;
                        for (let i = 0; i < document.getElementById("edit-chapter-desc").nextElementSibling.children.length; i++) {
                            if (document.getElementById("edit-chapter-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-chapter-desc").value == "") {
                                        document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("edit-chapter-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }
                    document.getElementById("edit-chapter-status").value = null;
                    if (document.getElementById("edit-chapter-content-available").checked == true) {
                        document.getElementById("edit-chapter-content-available").checked = false;
                    }

                    if (document.getElementById("edit-chapter-content-not-available").checked == true) {
                        document.getElementById("edit-chapter-content-not-available").checked = false;
                    }
                    document.getElementById("edit-chapter-created-date").value = null;
                }

                if (closeCRUDElement.match("details") != null) {
                    // Clear data in modal details chapter
                    document.getElementById("details-chapter-header").innerHTML = "Chapter";
                    document.getElementById("details-chapter-title").innerHTML = "Chapter Title";
                    document.getElementById("details-chapter-desc").innerHTML = "Chapter Desc";
                    document.getElementById("details-chapter-status").innerHTML = "Chapter Status";
                    document.getElementById("details-chapter-created-date").innerHTML = "Chapter Created Date";
                    document.getElementById("details-chapter-updated-date").innerHTML = "Chapter Updated Date";
                }

                if (closeCRUDElement.match("remove") != null) {
                    // Clear data in modal delete chapter
                    document.getElementById("delete-chapter-header").innerHTML = "Chapter";
                    document.getElementById("delete-chapter-title").innerHTML = "this chapter";
                    document.getElementById("delete-chapter-id").value = null;
                }

                // Reset Setting Form Id
                const editSettingFormChapter = document.getElementById("form-edit-chapter");
                const detailsSettingFormChapter = document.getElementById("form-details-chapter");
                const removeSettingFormChapter = document.getElementById("form-remove-chapter");

                if (editSettingFormChapter != null && detailsSettingFormChapter != null && removeSettingFormChapter != null) {
                    editSettingFormChapter.setAttribute("id", "form-edit-setting");
                    detailsSettingFormChapter.setAttribute("id", "form-details-setting");
                    removeSettingFormChapter.setAttribute("id", "form-remove-setting");
                }
            } else if (closeCRUDElement.match("lesson") != null) {
                if (closeCRUDElement.match("create") != null) {
                    // Remove Input Value, checkbox, etc...
                    document.getElementById("lesson-title").value = null;

                    // Reset Input Field
                    const inputs = document.querySelectorAll(".form-input");
                    inputs.forEach(item => {
                        if (item.id == "lesson-title") {
                            MoveLabelToDefault(item);
                        }
                    });

                    if (document.getElementById("lesson-desc")) {
                        document.getElementById("lesson-desc").value = null;
                        for (let i = 0; i < document.getElementById("lesson-desc").nextElementSibling.children.length; i++) {
                            if (document.getElementById("lesson-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("lesson-desc").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("lesson-desc").value == "") {
                                        document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("lesson-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }

                    if (document.getElementById("lesson-video") != null) {
                        document.getElementById("lesson-video").value = null;
                    }

                    if (document.getElementById("lesson-content") != null) {
                        document.getElementById("lesson-content").value = null;
                        document.getElementById("lesson-content").innerHTML = null;
                    }

                    document.getElementById("hidden-lesson-achievement").value = null;

                    for (let i = document.querySelector(".lesson-achievement-list").children.length - 1; i >= 0; i--) {
                        if (document.querySelector(".lesson-achievement-list").children[i].id != null) {
                            if (document.querySelector(".lesson-achievement-list").children[i].id.indexOf(`lesson-achievement-item-${i + 1}`) != -1) {
                                //document.querySelector(".lesson-achievement-list").removeChild(document.querySelector(".lesson-achievement-list").children[i]);
                                //console.log(document.querySelector(".lesson-achievement-list").children[i].id.slice(document.querySelector(".lesson-achievement-list").children[i].id.lastIndexOf('-') + 1));
                                RemoveAchievementItem(document.querySelector(".lesson-achievement-list").children[i].id.slice(document.querySelector(".lesson-achievement-list").children[i].id.lastIndexOf('-') + 1));
                            }
                        }
                    }

                    if (document.getElementById("lesson-content-not-available").checked == true) {
                        document.getElementById("lesson-content-not-available").checked = false;
                    }

                    if (document.getElementById("lesson-content-available").checked == true) {
                        document.getElementById("lesson-content-available").checked = false;
                    }

                    document.getElementById("course-lesson-status").value = null;
                    document.getElementById("course-lesson-chapter-id").value = null;
                }
                if (closeCRUDElement.match("edit") != null) {
                    // Remove data from modal edit lesson title
                    document.getElementById("edit-lesson-header").innerHTML = "Lesson";
                    // Remove data from modal edit lesson form field
                    document.getElementById("edit-lesson-id").value = null;

                    document.getElementById("edit-lesson-title").value = null;


                    // Release Input Field
                    const editLessonInput = document.getElementById("edit-lesson-title");
                    if (editLessonInput.value == null) {
                        MoveLabelToDefault(editLessonInput);
                    }

                    if (document.getElementById("edit-lesson-desc")) {
                        document.getElementById("edit-lesson-desc").value = null;
                        for (let i = 0; i < document.getElementById("edit-lesson-desc").nextElementSibling.children.length; i++) {
                            if (document.getElementById("edit-lesson-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-lesson-desc").value == null) {
                                        document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                    }

                                    if (document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("edit-lesson-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }

                    document.getElementById("edit-lesson-video-source").src = "";

                    document.getElementById("edit-hidden-lesson-achievement").value = null;

                    const editAchievementList = document.getElementById("edit-lesson-achievement-list");

                    for (let i = editAchievementList.children.length - 2; i >= 0; i--) {
                        --editModalRemoveId;
                        editAchievementList.removeChild(editAchievementList.children[i]);
                    }

                    document.getElementById("edit-course-lesson-status").value = null;
                    if (document.getElementById("edit-lesson-content-available").checked == true) {
                        document.getElementById("edit-lesson-content-available").checked = false;
                    } else if (document.getElementById("edit-lesson-content-not-available").checked = true) {
                        document.getElementById("edit-lesson-content-not-available").checked = false;
                    }
                    document.getElementById("edit-lesson-created-date").value = null;
                    document.getElementById("edit-course-lesson-chapter-id").value = null;
                } else if (closeCRUDElement.match("details") != null) {
                    // Remove data from modal details lesson
                    document.getElementById("details-lesson-header").innerHTML = "Lesson";
                    document.getElementById("details-lesson-id").innerHTML = null;
                    document.getElementById("details-lesson-title").innerHTML = null;
                    document.getElementById("details-lesson-desc").innerHTML = null;
                    document.getElementById("details-lesson-content").innerHTML = null;
                    if (document.getElementById("details-lesson-video-source").src != null) {
                        document.getElementById("details-lesson-video-source").src = "";
                    }

                    const ul = document.getElementById("details-lesson-achievement");

                    for (let i = ul.children.length - 1; i >= 0; i--) {
                        ul.removeChild(ul.children[i]);
                    }

                    if (document.getElementById("details-achievement-item-no-found") == null) {
                        // Create "li" node
                        const li = document.createElement("li");

                        // Add Class For "li" node
                        li.classList.add("details-list-achievement__item", "ml-16");
                        li.innerHTML = "No Achievement Found.";
                        li.id = "details-achievement-item-no-found";
                        ul.appendChild(li);
                    }

                    document.getElementById("details-lesson-status").innerHTML = null;
                    document.getElementById("details-lesson-created-date").innerHTML = null;
                    document.getElementById("details-lesson-updated-date").innerHTML = null;
                    document.getElementById("details-lesson-chapter-id").innerHTML = "Chapter Title";
                } else if (closeCRUDElement.match("remove") != null) {
                    // Clear data in modal delete lesson
                    document.getElementById("delete-lesson-header").innerHTML = "Lesson";
                    document.getElementById("delete-lesson-title").innerHTML = "this lesson";
                    document.getElementById("delete-lesson-id").value = null;
                    document.getElementById("delete-lesson-from-header").innerHTML = "Chapter";
                }

                // Reset Setting Form Id
                const editSettingFormLesson = document.getElementById("form-edit-lesson");
                const detailsSettingFormLesson = document.getElementById("form-details-lesson");
                const removeSettingFormLesson = document.getElementById("form-remove-lesson");

                if (editSettingFormLesson != null && detailsSettingFormLesson != null && removeSettingFormLesson != null) {
                    editSettingFormLesson.setAttribute("id", "form-edit-setting");
                    detailsSettingFormLesson.setAttribute("id", "form-details-setting");
                    removeSettingFormLesson.setAttribute("id", "form-remove-setting");
                }
            } else if(closeCRUDElement.match("exercise") != null) {
                if (closeCRUDElement.match("create") != null) {
                    // Remove Input Value, checkbox, etc...
                    document.getElementById("exercise-title").value = null;

                    // Reset Input Field
                    const inputs = document.querySelectorAll(".form-input");
                    inputs.forEach(item => {
                        if (item.id == "exercise-title") {
                            MoveLabelToDefault(item);
                        }
                    });

                    if (document.getElementById("exercise-desc")) {
                        document.getElementById("exercise-desc").value = null;
                        for (let i = 0; i < document.getElementById("exercise-desc").nextElementSibling.children.length; i++) {
                            if (document.getElementById("exercise-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("exercise-desc").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("exercise-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("exercise-desc").value == "") {
                                        document.getElementById("exercise-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("exercise-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("exercise-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }

                    if (document.getElementById("exercise-content")) {
                        document.getElementById("exercise-content").value = null;
                        for (let i = 0; i < document.getElementById("exercise-content").nextElementSibling.children.length; i++) {
                            if (document.getElementById("exercise-content").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("exercise-content").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("exercise-content").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("exercise-content").value == "") {
                                        document.getElementById("exercise-content").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("exercise-content").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("exercise-content").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }


                    if (document.getElementById("exercise-content-not-available").checked == true) {
                        document.getElementById("exercise-content-not-available").checked = false;
                    }

                    if (document.getElementById("exercise-content-available").checked == true) {
                        document.getElementById("exercise-content-available").checked = false;
                    }

                    document.getElementById("course-exercise-status").value = null;
                    document.getElementById("course-exercise-lesson-id").value = null;
                }
                else if (closeCRUDElement.match("edit") != null) {
                    // Remove Input Value, checkbox, etc...
                    document.getElementById("edit-exercise-id").value = null;
                    document.getElementById("edit-exercise-title").value = null;

                    // Reset Input Field
                    const inputs = document.querySelectorAll(".form-input");
                    inputs.forEach(item => {
                        if (item.id == "edit-exercise-title") {
                            MoveLabelToDefault(item);
                        }
                    });

                    if (document.getElementById("edit-exercise-desc")) {
                        document.getElementById("edit-exercise-desc").value = null;
                        for (let i = 0; i < document.getElementById("edit-exercise-desc").nextElementSibling.children.length; i++) {
                            if (document.getElementById("edit-exercise-desc").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-exercise-desc").value == "") {
                                        document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("edit-exercise-desc").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }

                    if (document.getElementById("edit-exercise-content")) {
                        document.getElementById("edit-exercise-content").value = null;
                        for (let i = 0; i < document.getElementById("edit-exercise-content").nextElementSibling.children.length; i++) {
                            if (document.getElementById("edit-exercise-content").nextElementSibling.children[i].classList.contains("note-editing-area")) {
                                for (let j = 0; j < document.getElementById("edit-exercise-content").nextElementSibling.children[i].children.length; j++) {
                                    if (document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].classList.contains("note-placeholder") && document.getElementById("edit-exercise-content").value == "") {
                                        document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].style.display = "block";
                                    }
                                    if (document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].classList.contains("note-editable")) {
                                        document.getElementById("edit-exercise-content").nextElementSibling.children[i].children[j].innerHTML = null;
                                    }
                                }
                            }
                        }

                    }


                    if (document.getElementById("edit-exercise-content-not-available").checked == true) {
                        document.getElementById("edit-exercise-content-not-available").checked = false;
                    }

                    if (document.getElementById("edit-exercise-content-available").checked == true) {
                        document.getElementById("edit-exercise-content-available").checked = false;
                    }

                    document.getElementById("edit-course-exercise-status").value = null;
                    document.getElementById("edit-course-exercise-lesson-id").value = null;
                }
                else if (closeCRUDElement.match("details") != null) {
                    // Remove data from modal details lesson
                    document.getElementById("details-exercise-header").innerHTML = "Exercise";
                    document.getElementById("details-exercise-id").innerHTML = null;
                    document.getElementById("details-exercise-title").innerHTML = null;
                    document.getElementById("details-exercise-desc").innerHTML = null;
                    document.getElementById("details-exercise-content").innerHTML = null;

                    document.getElementById("details-exercise-status").innerHTML = null;
                    document.getElementById("details-exercise-created-date").innerHTML = null;
                    document.getElementById("details-exercise-updated-date").innerHTML = null;
                    document.getElementById("details-exercise-lesson-id").innerHTML = "Lesson Title";
                }
                else if (closeCRUDElement.match("remove") != null) {
                    // Clear data in modal delete exercise
                    document.getElementById("delete-exercise-header").innerHTML = "Exercise";
                    document.getElementById("delete-exercise-title").innerHTML = "this exercise";
                    document.getElementById("delete-exercise-id").value = null;
                    document.getElementById("delete-exercise-from-lesson").innerHTML = "Lesson";
                }

                // Reset Setting Form Id
                const editSettingFormExercise = document.getElementById("form-edit-exercise");
                const detailsSettingFormExercise = document.getElementById("form-details-exercise");
                const removeSettingFormExercise = document.getElementById("form-remove-exercise");

                if (editSettingFormExercise != null && detailsSettingFormExercise != null && removeSettingFormExercise != null) {
                    editSettingFormExercise.setAttribute("id", "form-edit-setting");
                    detailsSettingFormExercise.setAttribute("id", "form-details-setting");
                    removeSettingFormExercise.setAttribute("id", "form-remove-setting");
                }
            }
        }

        // Function: Append New Achievement Item
        function AppendAchievementItem(newAchievementButton) {
            if (newAchievementButton.id.match("add")) {
                // Add id for remove achievement item
                ++RemoveId;
                // Append New Achievement
                const html = `            <li class="lesson-achievement-list__item ml-16" id="lesson-achievement-item-1">
                                                                                                                                                                                <div class="lesson-achievement-input-container">
                                                                                                                                                                                    <input type="text" name="lesson-achievement" class="lesson-achievement-input full-width" />
                                                                                                                                                                                    <button type="button" class="lesson-achievement-remove-btn btn-restart" id="lesson-achievement-remove-1">
                                                                                                                                                                                        <i class="fa-solid fa-minus"></i>
                                                                                                                                                                                    </button>
                                                                                                                                                                                </div>
                                                                                                                                                                            </li>`;
                // Lesson Achievement List
                const ul = document.querySelector(".lesson-achievement-list");

                // Create "li" node
                const li = document.createElement("li");

                // Add Class For "li" node
                li.classList.add("lesson-achievement-list__item", "ml-16");
                li.id = "lesson-achievement-item-" + RemoveId;
                li.setAttribute("custom-chapter-index", "");

                // Create "div" node
                const div = document.createElement("div");

                // Add Class For "div" node
                div.classList.add("lesson-achievement-input-container");
                div.setAttribute("custom-chapter-index", "");

                // Create "input" node
                const input = document.createElement("input");

                // Add Class For "input" node
                input.classList.add("lesson-achievement-input", "full-width");
                input.type = "text";
                input.setAttribute("name", "lesson-achievement");
                input.setAttribute("custom-chapter-index", "");

                // Create "button" node
                const button = document.createElement("button");

                // Add Class For "button" node
                button.classList.add("lesson-achievement-remove-btn", "btn-restart");
                button.id = "lesson-achievement-remove-" + RemoveId;
                button.type = "button";
                button.setAttribute("custom-chapter-index", "");

                // Create "icon" node
                const icon = document.createElement("i");

                // Add Class For "icon" node
                icon.classList.add("fa-solid", "fa-minus");
                icon.setAttribute("custom-chapter-index", "");

                button.appendChild(icon);
                div.appendChild(input);
                div.appendChild(button);
                li.appendChild(div);
                ul.insertBefore(li, ul.children[ul.children.length - 1]);

                // Change Achievement Status
                const achievementStatus = document.getElementById("lesson-achievement-status");
                if (achievementStatus) {
                    if (ul.children.length > 3) {
                        achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement items added`;
                    } else {
                        achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement item added`;
                    }
                }

                // Add Remove Achievement Item Event
                button.addEventListener("click", function () {
                    RemoveAchievementItem(button.id);
                });
            }
            else if (newAchievementButton.id.match("edit")) {
                // Add id for remove achievement item
                ++editModalRemoveId;
                // Append New Achievement
                const html = `            <li class="lesson-achievement-list__item ml-16" id="lesson-achievement-item-1">
                                                                                                                                                                                <div class="lesson-achievement-input-container">
                                                                                                                                                                                    <input type="text" name="lesson-achievement" class="lesson-achievement-input full-width" />
                                                                                                                                                                                    <button type="button" class="lesson-achievement-remove-btn btn-restart" id="lesson-achievement-remove-1">
                                                                                                                                                                                        <i class="fa-solid fa-minus"></i>
                                                                                                                                                                                    </button>
                                                                                                                                                                                </div>
                                                                                                                                                                            </li>`;
                // Lesson Achievement List
                const ul = document.getElementById("edit-lesson-achievement-list");

                // Create "li" node
                const li = document.createElement("li");

                // Add Class For "li" node
                li.classList.add("lesson-achievement-list__item", "ml-16");
                li.id = "edit-lesson-achievement-item-" + editModalRemoveId;
                li.setAttribute("custom-chapter-index", "");

                // Create "div" node
                const div = document.createElement("div");

                // Add Class For "div" node
                div.classList.add("lesson-achievement-input-container");
                div.setAttribute("custom-chapter-index", "");

                // Create "input" node
                const input = document.createElement("input");

                // Add Class For "input" node
                input.classList.add("lesson-achievement-input", "edit-achievement-input", "full-width");
                input.type = "text";
                input.setAttribute("name", "edit-lesson-achievement");
                input.setAttribute("custom-chapter-index", "");

                // Create "button" node
                const button = document.createElement("button");

                // Add Class For "button" node
                button.classList.add("lesson-achievement-remove-btn", "btn-restart");
                button.id = "edit-lesson-achievement-remove-" + editModalRemoveId;
                button.type = "button";
                button.setAttribute("custom-chapter-index", "");

                // Create "icon" node
                const icon = document.createElement("i");

                // Add Class For "icon" node
                icon.classList.add("fa-solid", "fa-minus");
                icon.setAttribute("custom-chapter-index", "");

                button.appendChild(icon);
                div.appendChild(input);
                div.appendChild(button);
                li.appendChild(div);
                ul.insertBefore(li, ul.children[ul.children.length - 1]);

                // Change Achievement Status
                const achievementStatus = document.getElementById("edit-lesson-achievement-status");
                if (achievementStatus) {
                    if (ul.children.length > 3) {
                        achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement items added`;
                    } else {
                        achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement item added`;
                    }
                }

                // Add Remove Achievement Item Event
                button.addEventListener("click", function () {
                    RemoveAchievementItem(button.id);
                });
            }
        }

        function RemoveAchievementItem(id) {
            if (id.match("edit")) {
                if (id != null && id != "") {
                    // Lesson Achievement List
                    const ul = document.getElementById("edit-lesson-achievement-list");

                    // Lesson Achievement List Item
                    const li = document.getElementById(`edit-lesson-achievement-item-${id.slice(id.lastIndexOf('-') + 1)}`);

                    // Remove Achievement List Item
                    ul.removeChild(li);

                    // Change Achievement Status
                    --editModalRemoveId;
                    const achievementStatus = document.getElementById("edit-lesson-achievement-status");
                    if (achievementStatus) {
                        if (ul.children.length > 3) {
                            achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement items added`;
                        }
                        else if (ul.children.length >= 1 && ul.children.length < 2) {
                            achievementStatus.innerHTML = "No Achievement Found.";
                        }
                        else {
                            achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement item added`;
                        }
                    }
                }
            } else {
                if (id != null && id != "") {
                    // Lesson Achievement List
                    const ul = document.querySelector(".lesson-achievement-list");

                    // Lesson Achievement List Item
                    const li = document.getElementById(`lesson-achievement-item-${id.slice(id.lastIndexOf('-') + 1)}`);

                    // Remove Achievement List Item
                    ul.removeChild(li);

                    // Change Achievement Status
                    --RemoveId;
                    const achievementStatus = document.getElementById("lesson-achievement-status");
                    if (achievementStatus) {
                        if (ul.children.length > 3) {
                            achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement items added`;
                        }
                        else if (ul.children.length >= 1 && ul.children.length < 2) {
                            achievementStatus.innerHTML = "No Achievement Found.";
                        }
                        else {
                            achievementStatus.innerHTML = `(${ul.children.length - 1}) achievement item added`;
                        }
                    }
                }
            }
        }

        // Function: Assign Lesson Achievement
        function AssignLessonAchievement(submitButton) {
            if (submitButton.id.match("edit")) {
                const achievementItemInputs = document.querySelectorAll(".edit-achievement-input");
                const lessonAchievementValue = [];
                achievementItemInputs.forEach(item => {
                    if (item.getAttribute("name") == "edit-lesson-achievement") {
                        //console.log(item.value);
                        lessonAchievementValue.push(item.value);
                    }
                });
                const hiddenAchievenetItemInput = document.getElementById("edit-hidden-lesson-achievement");
                //console.log(lessonAchievementValue);
                hiddenAchievenetItemInput.value = lessonAchievementValue;
            } else {
                const achievementItemInputs = document.querySelectorAll(".lesson-achievement-input");
                const lessonAchievementValue = [];
                achievementItemInputs.forEach(item => {
                    if (item.getAttribute("name") == "lesson-achievement") {
                        //console.log(item.value);
                        lessonAchievementValue.push(item.value);
                    }
                });
                const hiddenAchievenetItemInput = document.getElementById("hidden-lesson-achievement");
                //console.log(lessonAchievementValue);
                hiddenAchievenetItemInput.value = lessonAchievementValue;
            }
        }

        // Function: Change Setting Group Id
        function ChangeSettingGroupId(buttonSetting) {
            if (buttonSetting) {
                const editSettingForm = document.getElementById("form-edit-setting");
                const detailsSettingForm = document.getElementById("form-details-setting");
                const removeSettingForm = document.getElementById("form-remove-setting");


                if (editSettingForm && detailsSettingForm && removeSettingForm != null) {
                    if (buttonSetting.id.match("chapter")) {
                        editSettingForm.setAttribute("id", "form-edit-chapter");
                        detailsSettingForm.setAttribute("id", "form-details-chapter");
                        removeSettingForm.setAttribute("id", "form-remove-chapter");
                    } else if (buttonSetting.id.match("lesson")) {
                        editSettingForm.setAttribute("id", "form-edit-lesson");
                        detailsSettingForm.setAttribute("id", "form-details-lesson");
                        removeSettingForm.setAttribute("id", "form-remove-lesson");
                    } else if (buttonSetting.id.match("exercise")) {
                        editSettingForm.setAttribute("id", "form-edit-exercise");
                        detailsSettingForm.setAttribute("id", "form-details-exercise");
                        removeSettingForm.setAttribute("id", "form-remove-exercise");
                    }
                } else if (editSettingForm == null || detailsSettingForm == null || removeSettingForm == null) {
                    if (isSwitchSettings && currChapterId != 0) {
                        // Get Id
                        const editSettingFormChapter = document.getElementById("form-edit-chapter");
                        const detailsSettingFormChapter = document.getElementById("form-details-chapter");
                        const removeSettingFormChapter = document.getElementById("form-remove-chapter");

                        if(isLessonSetting)
                        {
                            editSettingFormChapter.setAttribute("id", "form-edit-lesson");
                            detailsSettingFormChapter.setAttribute("id", "form-details-lesson");
                            removeSettingFormChapter.setAttribute("id", "form-remove-lesson");
                        } else if(isExerciseSetting) {
                            editSettingFormChapter.setAttribute("id", "form-edit-exercise");
                            detailsSettingFormChapter.setAttribute("id", "form-details-exercise");
                            removeSettingFormChapter.setAttribute("id", "form-remove-exercise");
                        }
                    } else if (isSwitchSettings && currLessonId != 0) {
                        // Get Id
                        const editSettingFormLesson = document.getElementById("form-edit-lesson");
                        const detailsSettingFormLesson = document.getElementById("form-details-lesson");
                        const removeSettingFormLesson = document.getElementById("form-remove-lesson");

                        if(isChapterSetting)
                        {
                            editSettingFormLesson.setAttribute("id", "form-edit-chapter");
                            detailsSettingFormLesson.setAttribute("id", "form-details-chapter");
                            removeSettingFormLesson.setAttribute("id", "form-remove-chapter");
                        } else if(isExerciseSetting) {
                            editSettingFormLesson.setAttribute("id", "form-edit-exercise");
                            detailsSettingFormLesson.setAttribute("id", "form-details-exercise");
                            removeSettingFormLesson.setAttribute("id", "form-remove-exercise");
                        }
                    } else if (isSwitchSettings && currExerciseId != 0) {
                        // Get Id
                        const editSettingFormExercise = document.getElementById("form-edit-exercise");
                        const detailsSettingFormExercise = document.getElementById("form-details-exercise");
                        const removeSettingFormExercise = document.getElementById("form-remove-exercise");

                        if(isChapterSetting)
                        {
                            editSettingFormExercise.setAttribute("id", "form-edit-chapter");
                            detailsSettingFormExercise.setAttribute("id", "form-details-chapter");
                            removeSettingFormExercise.setAttribute("id", "form-remove-chapter");
                        } else if(isLessonSetting) {
                            editSettingFormExercise.setAttribute("id", "form-edit-lesson");
                            detailsSettingFormExercise.setAttribute("id", "form-details-lesson");
                            removeSettingFormExercise.setAttribute("id", "form-remove-lesson");
                        }
                    }
                }
            }
        }
    </script>
}
// <auto-generated />
using System;
using EasyCodeAcademy.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyCodeAcademy.Web.Migrations
{
    [DbContext(typeof(EasyCodeContext))]
    partial class EasyCodeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("CourseImage")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("CoursePrice")
                        .HasColumnType("Money");

                    b.Property<int>("CourseStatus")
                        .HasColumnType("int");

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("TopicId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseChapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("courseChapters");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseDetails", b =>
                {
                    b.Property<int>("CourseDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("CourseGain")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("CourseInclude")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("CourseLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseOverview")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("CourseRequirement")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("CourseDetailsId");

                    b.ToTable("courseDetails");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseExerise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("ExerciseId");

                    b.HasIndex("LessonId");

                    b.ToTable("courseExerises");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseLesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"), 1L, 1);

                    b.Property<string>("Achievement")
                        .HasColumnType("ntext");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Video")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterId");

                    b.ToTable("courseLessons");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"), 1L, 1);

                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("TopicId");

                    b.HasIndex("CateId");

                    b.ToTable("topics");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Course", b =>
                {
                    b.HasOne("EasyCodeAcademy.Web.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseChapter", b =>
                {
                    b.HasOne("EasyCodeAcademy.Web.Models.Course", "Course")
                        .WithMany("CourseChapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseDetails", b =>
                {
                    b.HasOne("EasyCodeAcademy.Web.Models.Course", "Course")
                        .WithOne("CourseDetails")
                        .HasForeignKey("EasyCodeAcademy.Web.Models.CourseDetails", "CourseDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseExerise", b =>
                {
                    b.HasOne("EasyCodeAcademy.Web.Models.CourseLesson", "Lesson")
                        .WithMany("CourseExerises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseLesson", b =>
                {
                    b.HasOne("EasyCodeAcademy.Web.Models.CourseChapter", "Chapter")
                        .WithMany("CourseLessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Topic", b =>
                {
                    b.HasOne("EasyCodeAcademy.Web.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Category", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Course", b =>
                {
                    b.Navigation("CourseChapters");

                    b.Navigation("CourseDetails");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseChapter", b =>
                {
                    b.Navigation("CourseLessons");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.CourseLesson", b =>
                {
                    b.Navigation("CourseExerises");
                });

            modelBuilder.Entity("EasyCodeAcademy.Web.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
